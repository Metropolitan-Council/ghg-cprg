## State DOT data

```{r}
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_quarto_helpers.R"))
source(file.path(here::here(), "R/_leaflet_helpers.R"))
source(file.path(here::here(), "R/_plotting_helpers.R"))
commercial_lines <- readRDS(file.path(here::here(), "_transportation/data/commercial_calibration_lines.RDS")) %>%
  mutate(hover_info = paste0(
    "Name: ", name, "<br>"
  ))

commercial_points <- readRDS(file.path(here::here(), "_transportation/data/commercial_calibration_points.RDS")) %>%
  mutate(hover_info = paste0(
    "<b>", "Name ", "</b>", name, "<br>",
    "<b>", "AADT ", "</b>", scales::comma(current_volume), "<br>",
    "<b>", "Year ", "</b>", year, "<br>",
    "<b>", "Passenger traffic ", "</b>", scales::percent(personal_traffic_ratio, accuracy = 1), "<br>",
    "<b>", "Medium-duty traffic ", "</b>", scales::percent(medium_commercial_ratio, accuracy = 1), "<br>",
    "<b>", "Heavy-duty traffic ", "</b>", scales::percent(heavy_commercial_ratio, accuracy = 1), "<br>"
  ))
hookaddcap()
```

As required by federal law, Minnesota and Wisconsin state departments of transportation (MnDOT and WisDOT) report various traffic measures for planning, forecasting, and various analysis endeavors.

### Vehicle miles traveled

Vehicle miles traveled (VMT) is a standardized measure created by multiplying average annual daily traffic (AADT) by centerline miles. AADT is an estimate of the total vehicles on a road segment on any given day of the year in all directions of travel. VMT and AADT are common traffic measures and standardized across the United States. 

MnDOT and WisDOT derive VMT using traffic counts from continuous and short term traffic monitoring sites. These raw counts are adjusted by multiplying seasonal, day-of-week, and axle adjustment factors [@mndotTFADataCollection2023, @wisdotTransportationPlanningManual2023]. Data is not collected for every site every year, but the data are sufficient for year-over-year comparisons. 

These data were compiled from MnDOT and WisDOT county level reports. MnDOT provides Excel workbooks with VMT by county and route system on their [website](https://www.dot.state.mn.us/roadway/data/data-products.html). These were downloaded, filtered to include the relevant counties, and aggregated to the county level by summing VMT by county/route system. Processing code can be found in [mndot_vmt_county.R](data-raw/mndot_vmt_county.R). 

VMT data for 2015 were interpolated at the county and year level using the midpoint method.[^ MnDOT VMT for year 2015 is unavailable due to significant and fundamental changes in underlying data structure that make directly comparing data prior- and post-2015 inappropriate. However, our interpolation here is based on the county level summary of all VMT and use for comparison purposes only. We used the midpoint method, which is the average of the observation directly before and directly after the missing data point.]

WisDOT publishes PDF tables with county-level VMT. These were downloaded and data was extracted using [`{tabulapdf}`](https://docs.ropensci.org/tabulapdf/), an R package interfacing with the Tabula PDF extractor library. Processing code can be found in [wisdot_vmt_county.R](data-raw/wisdot_vmt_county.R). 

```{r fig-dot-vmt}
#| fig-cap: "County vehicle miles traveled"
#| out-width: "95%"
dot_vmt <- readRDS(file.path(here::here(), "_transportation/data/dot_vmt.RDS")) %>%
  filter(
    year < 2022,
    year >= 2018,
    cprg_area == TRUE
  ) %>%
  group_by(county)


fig_dot_vmt <- plot_ly(
  data = dot_vmt,
  source = "fig-dot-vmt",
  x = ~year,
  y = ~annual_vmt,
  color = ~data_source,
  colors = c(
    "MnDOT" = colors$cdGreen,
    "WisDOT" = colors$metrostatsRed
  ),
  opacity = 0.7,
  type = "scatter",
  mode = "lines+markers",
  marker = list(
    size = 14,
    line = list(
      color = "lightgray",
      width = 2
    )
  ),
  line = list(
    width = 3
  ),
  hovertemplate = ~ paste0(
    county, " County", "<br>",
    year, "<br>",
    round(annual_vmt * 1e-9, digits = 2), " billion VMT annually", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "County annual vehicle miles traveled",
    x_title = "Year",
    y_title = "VMT",
    legend_title = "Data source"
  )

fig_dot_vmt
```


### Vehicle distribution by weight {#sec-vehicle-weight-dist}

To calibrate the generalized StreetLight Index to get commercial vehicle counts, we created a set of spatial lines (roads) to calibrate StreetLight's metrics. For each calibration road, we found the proportion of passenger, medium-, and heavy-duty vehicles in the most recently available year, up to 2021. 

State DOTs operate vehicle classification stations, which provide both the volume of traffic on a given road segment and, for some locations, the breakdown of volume by vehicle type. We obtained this breakdown using data from MnDOT [@mndotYearlyVolumeTrends2021] and WisDOT [@wisdotWisconsinVehicleClassification2020] reporting websites. 

MnDOT provides AADT road segments, which align with station identification numbers. Wisconsin does not readily supply AADT road segment data, so as suggested by the Wisconsin cartographers office [@statecartographersofficeWisconsinRoadData2021] we pulled OpenStreetMaps road data (OSM version `r wi_osm_meta$OSM_version`). 

Then, we selected only the stations within the study area with observations in the last five years (2017-2021). Finally, we joined this data with AADT [@mndotVMTRouteSystem2021, @wisdotWisconsinVehicleMiles2021] road segments by station ID. The road segments sampled include multiple road functional classes and segments in all counties. All traffic sensor stations pulled were permanent, continuous monitoring sites. Data were cross-validated by verifying AADT and weight distribution fields on [MnDOT](https://mndot.maps.arcgis.com/apps/webappviewer/index.html?id=7b3be07daed84e7fa170a91059ce63bb) and [WisDOT](https://wisdot.maps.arcgis.com/apps/webappviewer/index.html?id=2e12a4f051de4ea9bc865ec6393731f8) traffic mapping applications. 

Data were processed in R scripts: [wisdot_stations.R](data-raw/wisdot_stations.R), [mndot_extract_yearly_volume_trends.R](data-raw/mndot_extract_yearly_volume_trends.R),  [mndot_stations.R](data-raw/mndot_stations.R), [calibration_lines_points.R](data-raw/calibration_lines_points.R).  

```{r fig-map-calibration-set}
#| fig-cap: "StreetLight calibration locations and values"
#| out-width: "95%"
#| out-height: "500px"

cprg_county <- readRDS(file.path(here::here(), "_meta/data/cprg_county.RDS"))

bound_box <- st_bbox(commercial_lines) %>%
  unlist()

fig_map_calibration_set <-
  council_leaflet() %>%
  addPolygons(
    data = cprg_county %>%
      sf::st_transform(4326),
    fill = FALSE,
    color = "gray",
    popup = cprg_county$NAMELSAD,
    group = "County outlines"
  ) %>%
  addPolylines(
    data = commercial_lines,
    weight = 6,
    color = "black",
    popup = commercial_lines$hover_info,
    group = "Road segments"
  ) %>%
  addCircleMarkers(
    data = commercial_points,
    popup = commercial_points$hover_info,
    fillColor = colors$councilBlue,
    radius = 10,
    group = "Stations"
  ) %>%
  leaflet::addLayersControl(
    overlayGroups = c(
      "County outlines",
      "Stations",
      "Road segments"
    )
  ) %>%
  fitBounds(
    lng1 = bound_box[[1]],
    lng2 = bound_box[[3]],
    lat1 = bound_box[[2]],
    lat2 = bound_box[[4]]
  )

fig_map_calibration_set
```

Only `r nrow(commercial_points)` calibration roads were used for this inventory due to data availability constraints. 

```{r fig-vehicle-weight-distribution}
#| fig-cap: "Vehicle weight distribution at calibration points"
#| out-width: "95%"
calibration_long <- commercial_points %>%
  arrange(-heavy_commercial_ratio) %>%
  select(
    name,
    year,
    personal_traffic_ratio,
    medium_commercial_ratio,
    heavy_commercial_ratio
  ) %>%
  sf::st_drop_geometry() %>%
  tidyr::pivot_longer(
    cols = c(
      personal_traffic_ratio,
      medium_commercial_ratio,
      heavy_commercial_ratio
    ),
    names_to = "vehicle_weight"
  ) %>%
  mutate(
    vehicle_weight =
      case_when(
        vehicle_weight == "personal_traffic_ratio" ~ "Passenger",
        vehicle_weight == "medium_commercial_ratio" ~ "Medium-duty",
        vehicle_weight == "heavy_commercial_ratio" ~ "Heavy-duty",
      )
  )

fig_vehicle_weight_distribution <- plot_ly(
  data = calibration_long,
  source = "fig-vehicle-weight-distribution",
  type = "bar",
  x = ~name,
  y = ~value,
  color = ~vehicle_weight,
  colors = unlist(vehicle_weight_colors),
  hoverinfo = "text",
  hovertemplate = ~ paste0(
    "Name: ", name, "<br>",
    "Year: ", year, "<br>",
    scales::percent(value, accuracy = 1), " ", vehicle_weight, "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Vehicle weight distribution",
    subtitle = "Select locations used for calibration",
    y_title = "Proportion of all traffic",
    x_title = "Calibration zone",
    legend_title = "Vehicle weight"
  ) %>%
  layout(
    barmode = "stack",
    xaxis = list(
      rangemode = "normal",
      ticktext = ""
    ),
    yaxis = list(
      tickformat = "1%"
    )
  )

fig_vehicle_weight_distribution
```

### Limitations

- AADT/VMT data rely on modeling, and not every site will have new observed data every year. 
- AADT/VMT are generally estimated for high-use arterial roads and highways, leaving local roads out.
- We may want to consider using non-permanent counters and/or counters from just outside the study region to increase the total number of calibration roads. 


<!-- ### Data dictionaries -->

<!-- ```{r tbl-dot-vmt-meta} -->
<!-- #| tbl-cap: "County vehicle miles traveled metadata" -->
<!-- #| out-width: "95%" -->
<!-- dot_vmt_meta <- readRDS(file.path(here::here(), "_transportation/data/dot_vmt_meta.RDS")) -->

<!-- dot_vmt_meta %>% -->
<!--   gt() %>% -->
<!--   gt::opt_row_striping() %>% -->
<!--   tab_style( -->
<!--     style = cell_text(weight = "bold"), -->
<!--     locations = cells_column_labels() -->
<!--   ) %>% -->
<!--   gt::as_raw_html() -->
<!-- ``` -->


```{r echo=FALSE}
caption_index <- readRDS(file.path(here::here(), "caption_index.RDS"))
caption_index <- as.character(as.numeric(caption_index) + 1) %>% stringr::str_pad(width = 2, side = "left", pad = "0")
saveCap(paste0("cap-", caption_index))
saveRDS(caption_index, file.path(here::here(), "caption_index.RDS"))
```
{{< pagebreak >}}
