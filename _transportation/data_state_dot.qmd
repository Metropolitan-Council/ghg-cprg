### State DOT data

```{r}
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_quarto_helpers.R"))
source(file.path(here::here(), "R/_leaflet_helpers.R"))
source(file.path(here::here(), "R/_plotting_helpers.R"))


cprg_county <- readRDS(file.path(here::here(), "_meta/data/cprg_county.RDS"))

# read in VMT data
dot_vmt <- readRDS(file.path(here::here(), "_transportation/data/dot_vmt.RDS")) %>%
  filter(
    # vmt_year < 2022,
    vmt_year >= 2018,
    cprg_area == TRUE
  ) %>%
  group_by(county_name)

mndot_vmt_ctu <- readRDS(file.path(here::here(), "_transportation/data/mndot_vmt_ctu.RDS"))

# summarize by CTU name
mndot_ctu_summary <- mndot_vmt_ctu %>%
  group_by(vmt_year, ctu_name) %>%
  summarize(annual_vmt = sum(annual_vmt))

ctu_population <- readRDS(file.path(here::here(), "_meta/data/ctu_population.RDS"))

top_ten_ctu <- ctu_population %>%
  filter(inventory_year == max(inventory_year)) %>%
  arrange(-ctu_population) %>%
  slice(1:10)

multi_county_ctu <- mndot_vmt_ctu %>%
  select(geoid, ctuid, ctu_name) %>%
  unique() %>%
  group_by(ctu_name) %>%
  count() %>%
  filter(n >= 2)

vmt_model_data <- readRDS(file.path(here::here(), "_transportation/data/vmt_model_data.RDS"))

mndot_vmt_ctu_gap_filled <- readRDS(file.path(here::here(), "_transportation/data/mndot_vmt_ctu_gap_filled.RDS"))
vmt_gap_fill_model <- readRDS(file.path(here::here(), "_transportation/data/vmt_gap_fill_model.RDS"))
mndot_vmt_county_marginals <- readRDS(file.path(here::here(), "_transportation/data/mndot_vmt_county_marginals.RDS")) %>%
  mutate(county_pct = sum_ctu_vmt / county_daily_vmt) %>%
  left_join(cprg_county %>% select(geoid, county_name) %>% sf::st_drop_geometry() %>% unique())

# hookaddcap()
```

As required by federal law, Minnesota and Wisconsin state departments of transportation (MnDOT and WisDOT) report various traffic measures for planning, forecasting, and various analysis endeavors.

#### Vehicle miles traveled

Vehicle miles traveled (VMT) is a standardized measure created by multiplying average annual daily traffic (AADT) by centerline miles. AADT is an estimate of the total vehicles on a road segment on any given day of the year in all directions of travel. VMT and AADT are common traffic measures and standardized across the United States. 

MnDOT and WisDOT derive VMT using traffic counts from continuous and short term traffic monitoring sites. These raw counts are adjusted by multiplying seasonal, day-of-week, and axle adjustment factors [@mndotTFADataCollection2023, @wisdotTransportationPlanningManual2023]. Data is not collected for every site every year, but the data are sufficient for year-over-year comparisons. 

##### County vehicle miles traveled

We consider county-level data to be of the highest quality and most reliable measure of VMT.

These data were compiled from MnDOT and WisDOT county level reports. MnDOT provides Excel workbooks with VMT by county and route system on their [website](https://www.dot.state.mn.us/roadway/data/data-products.html). These were downloaded, filtered to include the relevant counties, and aggregated to the county level by summing VMT by county/route system. Processing code can be found in [mndot_vmt_county.R](data-raw/mndot_vmt_county.R). 

VMT data for 2015 were interpolated at the county and year level using the midpoint method.[^ MnDOT VMT for year 2015 is unavailable due to significant and fundamental changes in underlying data structure that make directly comparing data prior- and post-2015 inappropriate. However, our interpolation here is based on the county level summary of all VMT and use for comparison purposes only. We used the midpoint method, which is the average of the observation directly before and directly after the missing data point.]

WisDOT publishes PDF tables with county-level VMT. These were downloaded and data was extracted using [`{tabulapdf}`](https://docs.ropensci.org/tabulapdf/), an R package interfacing with the Tabula PDF extractor library. Processing code can be found in [wisdot_vmt_county.R](data-raw/wisdot_vmt_county.R). 

```{r fig-dot-vmt-county}
#| fig-cap: "County annual vehicle miles traveled"
#| out-width: "95%"

fig_dot_vmt <- plot_ly(
  data = dot_vmt,
  source = "fig-dot-vmt-county",
  x = ~vmt_year,
  y = ~annual_vmt,
  color = ~data_source,
  colors = c(
    "MnDOT" = colors$cdGreen,
    "WisDOT" = colors$metrostatsRed
  ),
  opacity = 0.7,
  type = "scatter",
  mode = "lines+markers",
  marker = list(
    size = 14,
    line = list(
      color = "lightgray",
      width = 2
    )
  ),
  line = list(
    width = 3
  ),
  hovertemplate = ~ paste0(
    county_name, " County", "<br>",
    vmt_year, "<br>",
    round(annual_vmt * 1e-9, digits = 2), " billion VMT annually", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "County annual vehicle miles traveled",
    x_title = "Year",
    y_title = "Annual VMT",
    legend_title = "Data source"
  )

fig_dot_vmt
```

##### City vehicle miles traveled

City VMT is available only for a select number of cities, townships, unorganized areas (CTUs). 

These data were compiled from MnDOT city and route system reports available on their [website](https://www.dot.state.mn.us/roadway/data/data-products.html). Reports were downloaded and aggregated at the CTU level by summing VMT up for all route systems. Processing code can be found in [mndot_vmt_ctu.R](data-raw/mndot_vmt_ctu.R). 

Due to limitations in data availability and consistency, not all CTUs in the 7-county metro region are included. 

<!-- - CTUs without reported data prior to 2014 are excluded. -->
<!-- - CTUs without sampled data on local route systems (including Municipal State Aid Streets) during any year from 2017-2023 are excluded. See more about route system designations in [mndot_route_system.R](data-raw/mndot_route_system.R). -->
- Shoreview, Blaine, and West Saint Paul are split among more than one county. For some CTU/county/year combinations, only data from 2016 onward were available. For consistency in the time series, we assigned 2016 VMT data to year 2015 for these CTU/county combinations.
- Due to geographic data source differences, MnDOT reports a small amount of VMT invalid CTU/county combinations (i.e., Minneapolis, a Hennepin County CTU, centerline miles and VMT reported in Anoka County). We discussed these anomalies with MnDOT staff and determined this to be a non-issue. The county designations for each CTU were corrected such that summing to the CTU by the CTU name determines the total VMT for each CTU No changes to county designation were made to CTUs known to be split across multiple counties (`r listify(multi_county_ctu$ctu_name)`). 
- 2015 data were interpolated in the same manner as the county VMT data. 


```{r fig-dot-vmt-ctu}
#| fig-cap: "City annual vehicle miles traveled"
#| out-width: "95%"

mndot_ctu_summary %>%
  ungroup() %>%
  mutate(vmt_year = as.numeric(vmt_year)) %>%
  filter(
    ctu_name %in% top_ten_ctu$ctu_name,
    vmt_year >= 2018
  ) %>%
  plot_ly(
    source = "fig-dot-vmt-ctu",
    type = "scatter",
    mode = "lines+markers",
    x = ~vmt_year,
    y = ~annual_vmt,
    color = ~ reorder(ctu_name, -annual_vmt),
    colors = "Dark2",
    opacity = 0.7,
    marker = list(
      size = 10,
      line = list(
        color = "lightgray",
        width = 1
      )
    ),
    line = list(
      width = 3
    ),
    hovertemplate = ~ paste0(
      ctu_name, "<br>",
      vmt_year, "<br>",
      round(annual_vmt * 1e-9, digits = 2), " billion VMT annually", "<br>",
      "<extra></extra>"
    )
  ) %>%
  plotly_layout(
    main_title = "City annual vehicle miles traveled",
    x_title = "Year",
    y_title = "Annual VMT",
    legend_title = "City",
    subtitle = "Source: MnDOT VMT reports"
  ) %>%
  layout(
    yaxis = list(categoryorder = "trace")
  ) %>%
  suppressWarnings()
```

Cities without a complete time series from 2010 to 2023 were modeled. 

##### Gap-filled city vehicle miles traveled

Modeling took place in [mndot_vmt_ctu_gap_fill_model.R](data-raw/mndot_vmt_ctu_gap_fill_model.R).

All counties have the majority of their VMT accounted for when totaling up reported city level VMT. 

```{r fig-vmt-county-ctu-gap}
#| fig-cap: "Proportion of county VMT accounted for by city VMT"
#| out-width: "95%"

fig_vmt_county_ctu_gap <- plot_ly(
  source = "fig-vmt-county-ctu-gap",
  type = "bar",
  data = mndot_vmt_county_marginals %>%
    filter(inventory_year == 2022),
  x = ~county_name,
  y = ~county_pct,
  hoverinfo = "text",
  hovertemplate = ~ paste0(
    county_name, "<br>",
    inventory_year, "<br>",
    scales::percent(county_pct), " of VMT accounted for in city estimates", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    x_title = "County",
    y_title = "% of county VMT accounted for",
    main_title = "Most county VMT is accounted for in city estimates"
  ) %>%
  layout(
    yaxis = list(tickformat = "1%"),
    xaxis = list(categoryorder = "total descending")
  )
```

For cites without reported annual MnDOT VMT, we estimated VMT from 2010 to 2022 using a model trained on population, households, employment, county, and Imagine 2050 designation. 

<!-- ```{r vmt-gap-fill-model-latex} -->
<!-- #| output: asis -->
<!-- equatiomatic::extract_eq(model = vmt_gap_fill_model) -->
<!-- ``` -->


#### Limitations

- AADT/VMT data rely on modeling, and not every site will have new observed data every year. 
- AADT/VMT are generally estimated for high-use arterial roads and highways, leaving most local roads out.
- We may want to consider using non-permanent counters and/or counters from just outside the study region to increase the total number of calibration roads. 


<!-- ### Data dictionaries -->

<!-- ```{r tbl-dot-vmt-meta} -->
<!-- #| tbl-cap: "County vehicle miles traveled metadata" -->
<!-- #| out-width: "95%" -->
<!-- dot_vmt_meta <- readRDS(file.path(here::here(), "_transportation/data/dot_vmt_meta.RDS")) -->

<!-- dot_vmt_meta %>% -->
<!--   gt() %>% -->
<!--   gt::opt_row_striping() %>% -->
<!--   tab_style( -->
<!--     style = cell_text(weight = "bold"), -->
<!--     locations = cells_column_labels() -->
<!--   ) %>% -->
<!--   gt::as_raw_html() -->
<!-- ``` -->


```{r echo=FALSE}
# caption_index <- readRDS(file.path(here::here(), "caption_index.RDS"))
# caption_index <- as.character(as.numeric(caption_index) + 1) %>% stringr::str_pad(width = 2, side = "left", pad = "0")
# saveCap(paste0("cap-", caption_index))
# saveRDS(caption_index, file.path(here::here(), "caption_index.RDS"))
```
{{< pagebreak >}}
