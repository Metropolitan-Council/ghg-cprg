## State DOT data

```{r}
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_quarto_helpers.R"))
hookaddcap()
```

As required by federal law, Minnesota and Wisconsin state departments of transportation (MnDOT and WisDOT) report various traffic measures for planning, forecasting, and various analysis endeavors.


#### Vehicle miles travled

Vehicle miles traveled (VMT) is a standardized measure created by multiplying average annual daily traffic (AADT) by centerline miles. AADT is an estimate of the total vehicles on a road segment on any given day of the year in all directions of travel. VMT and AADT are common traffic measures and standardized across the United States. 

MnDOT and WisDOT derive VMT using traffic counts from continuous and short term traffic monitoring sites. These raw counts are adjusted by multiplying seasonal, day-of-week, and axle adjustment factors [@mndotTFADataCollection2023, @wisdotTransportationPlanningManual2023]. Data is not collected for every site every year, but the data are sufficient for year-over-year comparisons. 

These data were compiled from MnDOT and WisDOT county level reports. MnDOT provides Excel workbooks with VMT by county and route system on their [website](https://www.dot.state.mn.us/roadway/data/data-products.html). These were downloaded, filtered to include on the relevant counties, and aggregated to the county level by summing VMT by county/route system. Processing code can be found in [mndot_vmt_county.R](data-raw/mndot_vmt_county.R).

WisDOT publishes PDF tables with county-level VMT. These were downloaded and data extracted using [`{tabulizer}`](https://github.com/ropensci/tabulizer), an R package interfacing with the Tabula PDF extractor library. Processing code can be found in [wisdot_vmt_county.R](data-raw/wisdot_vmt_county.R). 

```{r fig-dot-vmt}
#| fig-cap: "County vehicle miles traveled"
#| out-width: "95%"
dot_vmt <- readRDS(file.path(here::here(), "_transportation/data/dot_vmt.RDS")) %>%
  filter(year < 2022) %>%
  group_by(county)


plot_ly(
  data = dot_vmt,
  source = knitr::opts_current$get()$label,
  x = ~year,
  y = ~annual_vmt,
  color = ~data_source,
  type = "scatter",
  mode = "lines+markers",
  hovertemplate = ~ paste0(
    county, " County", "<br>",
    year, "<br>",
    round(annual_vmt * 1e-9, digits = 2), " billion VMT annually", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "County annual vehicle miles traveled",
    x_title = "Year",
    y_title = "VMT",
    legend_title = "Data source"
  )
```

Data source description, type

- Quality rank (See @tbl-quality-rank)
- How, when, and why was the data collected?
- If this is a modeled dataset, what is the sample?
- What is the raw unit of measurement? 
- How was this data accessed? Include any relevant links/citations, code, or downloads.
- What data cleaning or wrangling was completed? How did you test these processes and outputs?
- What is the geographic and temporal scope? Did you complete any aggregation?
- What version is the data? Were there other versions available? If so, why did you choose this version?
- What assumptions are made when we use this dataset?
- Which subject matter expert (SME) reviewed this data?
- Describe testing used to verify data

Be sure to add a citation of this dataset to the Zotero shared library.

##### Data characteristics

- Were there any missing data? How did you handle missing data?
- Plots, tables, and description of data distribution
- Variance, Z-Score, quantiles
- Facet views by categorical variables


##### Limitations

- Usually only samples county and state roads, primary arterials
- Not every site is sampled every year

#### Vehicle distribution by weight {#sec-vehicle-weight-dist}

To calibrate the generalized StreetLight Index to get vehicle counts, we created a set of spatial lines (roads) to calibrate StreetLight's metrics. For each calibration road, we found the proportion of passenger, medium-, and heavy-duty vehicles in the most recent available year, up to 2021. 

State DOTs operate vehicle classification stations, which provide both the volume of traffic on a given road segment and, for some locations, the breakdown of volume by vehicle type. We obtained this breakdown using data from MnDOT [@mndotYearlyVolumeTrends2021] and WisDOT [@wisdotWisconsinVehicleClassification2020] reporting websites. 

MnDOT provides AADT road segments, which align with station identification numbers. Wisconsin does not readily supply AADT road segment data - as suggested by the Wisconsin cartographers office [@statecartographersofficeWisconsinRoadData2021], we pulled OpenStreetMaps road data (OSM version `r wi_osm_meta$OSM_version`). 

Then, we selected only the stations within the study area with observations in the last five years (2017-2021). Finally, we joined this data with Average Annual Daily Traffic (AADT) [@mndotVMTRouteSystem2021, @wisdotWisconsinVehicleMiles2021] road segments by station ID. The road segments sampled include multiple road functional classes and segments in all counties. All traffic sensor stations pulled were permanent, continuous monitoring sites.

```{r fig-map-calibration-set}
#| fig-cap: "StreetLight calibration locations and values"
#| out-width: "95%"
#| out-height: "500px"
commercial_lines <- readRDS(file.path(here::here(), "_transportation/data/commercial_calibration_lines.RDS")) %>%
  mutate(hover_info = paste0(
    "Name: ", name, "<br>"
  ))

commercial_points <- readRDS(file.path(here::here(), "_transportation/data/commercial_calibration_points.RDS")) %>%
  mutate(hover_info = paste0(
    "Name: ", name, "<br>",
    "AADT: ", scales::comma(current_volume), "<br>",
    "Year: ", year, "<br>",
    "Passenger traffic: ", scales::percent(personal_traffic_ratio, accuracy = 1), "<br>",
    "Medium-duty traffic: ", scales::percent(medium_commercial_ratio, accuracy = 1), "<br>",
    "Heavy-duty traffic: ", scales::percent(heavy_commercial_ratio, accuracy = 1), "<br>"
  ))


bound_box <- st_bbox(commercial_lines) %>%
  unlist()

council_leaflet() %>%
  addPolygons(
    data = cprg_county %>%
      sf::st_transform(4326),
    fill = FALSE,
    color = "gray",
    popup = cprg_county$NAMELSAD,
    group = "County outlines"
  ) %>%
  addPolylines(
    data = commercial_lines,
    weight = 6,
    color = "black",
    popup = commercial_lines$hover_info,
    group = "Road segments"
  ) %>%
  addCircleMarkers(
    data = commercial_points,
    popup = commercial_points$hover_info,
    fillColor = colors$councilBlue,
    radius = 10,
    group = "Stations"
  ) %>%
  leaflet::addLayersControl(
    overlayGroups = c(
      "County outlines",
      "Stations",
      "Road segments"
    )
  ) %>%
  fitBounds(
    lng1 = bound_box[[1]],
    lng2 = bound_box[[3]],
    lat1 = bound_box[[2]],
    lat2 = bound_box[[4]]
  )
```


```{r fig-vehicle-weight-distribution}
#| fig-cap: "Vehicle weight distribution at calibration points"
#| out-width: "95%"
calibration_long <- commercial_points %>%
  arrange(-heavy_commercial_ratio) %>%
  select(
    name,
    year,
    personal_traffic_ratio,
    medium_commercial_ratio,
    heavy_commercial_ratio
  ) %>%
  sf::st_drop_geometry() %>%
  tidyr::pivot_longer(
    cols = c(
      personal_traffic_ratio,
      medium_commercial_ratio,
      heavy_commercial_ratio
    ),
    names_to = "vehicle_weight"
  ) %>%
  mutate(
    vehicle_weight =
      case_when(
        vehicle_weight == "personal_traffic_ratio" ~ "Passenger",
        vehicle_weight == "medium_commercial_ratio" ~ "Medium-duty",
        vehicle_weight == "heavy_commercial_ratio" ~ "Heavy-duty",
      ),
    hovertext = paste0(
      "Name: ", name, "<br>",
      "Year: ", year, "<br>",
      scales::percent(value, accuracy = 1), " ", vehicle_weight, "<br>",
      "<extra></extra>"
    )
  )

plot_ly(
  data = calibration_long,
  source = opts_current$get()$label,
  type = "bar",
  x = ~name,
  y = ~value,
  color = ~vehicle_weight,
  hoverinfo = "text",
  hovertemplate = ~hovertext
) %>%
  plotly_layout(
    main_title = "Vehicle weight distribution",
    y_title = "Proportion of all traffic",
    x_title = "Calibration zone",
    legend_title = "Vehicle weight"
  ) %>%
  layout(
    barmode = "stack",
    xaxis = list(
      rangemode = "normal",
      ticktext = ""
    ),
    yaxis = list(
      tickformat = "1%"
    )
  )
```


Introduction text 
Data source description, type

- Quality rank (See @tbl-quality-rank)
- How, when, and why was the data collected?
- If this is a modeled dataset, what is the sample?
- What is the raw unit of measurement? 
- How was this data accessed? Include any relevant links/citations, code, or downloads.
- What data cleaning or wrangling was completed? How did you test these processes and outputs?
- What is the geographic and temporal scope? Did you complete any aggregation?
- What version is the data? Were there other versions available? If so, why did you choose this version?
- What assumptions are made when we use this dataset?
- Which subject matter expert (SME) reviewed this data?
- Describe testing used to verify data

Be sure to add a citation of this dataset to the Zotero shared library.

##### Data characteristics

- Were there any missing data? How did you handle missing data?
- Plots, tables, and description of data distribution
- Variance, Z-Score, quantiles
- Facet views by categorical variables


##### Limitations

### Data dictionaries

```{r tbl-dot-vmt-meta}
#| tbl-cap: "County vehicle miles traveled metadata"
#| out-width: "95%"
dot_vmt_meta <- readRDS(file.path(here::here(), "_transportation/data/dot_vmt_meta.RDS"))

dot_vmt_meta %>%
  gt() %>%
  gt::opt_row_striping() %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  ) %>%
  gt::as_raw_html()
```

Table with detailed description of columns and definitions for each data table.


```{r echo=FALSE}
caption_index <- readRDS(file.path(here::here(), "caption_index.RDS"))
caption_index <- as.character(as.numeric(caption_index) + 1) %>% stringr::str_pad(width = 2, side = "left", pad = "0")
saveCap(paste0("cap-", caption_index))
saveRDS(caption_index, file.path(here::here(), "caption_index.RDS"))
```
