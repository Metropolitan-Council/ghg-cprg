## StreetLight Data
```{r}
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_quarto_helpers.R"))
source(file.path(here::here(), "R/_leaflet_helpers.R"))

cprg_county <- readRDS(file.path(here::here(), "_meta/data/cprg_county.RDS"))
county21_data <- readRDS(file.path(here::here(), "_transportation/data-raw/analysis_runs/county21_data.RDS"))
county21_truck_data <- readRDS(file.path(here::here(), "_transportation/data-raw/analysis_runs/county21_truck_calib_data.rds"))
wi_osm_meta <- readRDS(file.path(here::here(), "_transportation/data-raw/wisdot/wi_osm_meta.RDS"))
tbi_od_ordered_trip_length <- readRDS(file.path(here(), "_transportation/data-raw/tbi/tbi_od_ordered_trip_length.RDS"))
vmt_emissions <- readRDS(file.path(here::here(), "_transportation/data/county_vmt_emissions.RDS"))
vmt_emissions_all <- vmt_emissions %>%
  group_by(zone) %>%
  summarise(
    vmt_total = sum(vmt_total),
    vmt_same = sum(vmt_same),
    emissions_metric_tons_co2e = sum(emissions_metric_tons_co2e)
  )

hookaddcap()
```

[StreetLight Data](https://www.streetlightdata.com/) is a transportation analytics platform that uses aggregated location-based services (LBS) data from cell phones and navigation/GPS data to deliver insights on travel patterns. For this project, we used StreetLight to find the volume of traffic (number of vehicles) and average trip length for passenger and commercial vehicles. 

For ease of access, we used [`{streetlightR}`](https://github.com/Metropolitan-Council/streetlightR) to interact directly with the StreetLight API. `{streetlightR}` is an open-source R package maintained by Council staff. 

Data source description, type

- StreetLight Data, falls in second rank. Quality rank (See @tbl-quality-rank)
- How, when, and why was the data collected?
- If this is a modeled dataset, what is the sample?
- What is the raw unit of measurement? 
- How was this data accessed? Include any relevant links/citations, code, or downloads.
- What data cleaning or wrangling was completed? How did you test these processes and outputs?
- What is the geographic and temporal scope? Did you complete any aggregation?
- What version is the data? Were there other versions available? If so, why did you choose this version?
- What assumptions are made when we use this dataset?
- Which subject matter expert (SME) reviewed this data?
- Describe testing used to verify data

Be sure to add a citation of this dataset to the Zotero shared library.

### Data characteristics

- Were there any missing data? How did you handle missing data?
- Plots, tables, and description of data distribution
- Variance, Z-Score, quantiles
- Facet views by categorical variables

### Passenger 

For passenger data, we used StreetLight Volume - an estimate of the number of vehicles. The models that make up StreetLight Volume predict vehicle volumes by combining Location-Based Services (LBS) trips with contextual features that represent the street network, demographics, climate, and other geographic characteristics [@streetlightdataStreetLightAllVehicles2023]. The models are validated against data permanent traffic counters across the country, including in the study area. 

```{r tbl-passenger-stl-sample-size}
#| tbl-cap: "StreetLight passenger travel analysis sample size"
#| out-width: "95%"
county21_data$sample_size %>%
  select(
    `Data periods` = data_periods,
    `Mode of travel` = mode_of_travel,
    `Approximate device count` = approximate_device_count,
    `Approximate trip count` = approximate_trip_count
  ) %>%
  gt() %>%
  gt::opt_row_striping() %>%
  gt::fmt_number(columns = 3:4, decimals = 0) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  )
```


#### Trip length validation {#sec-trip-length-validation}

StreetLight returns not only vehicle volume, but also trip attributes, like trip length. We then use this to estimate vehicle miles traveled, by multiplying volume by average trip length for each origin-destination pair. 

To test logical validity of average trip lengths, we will compare the minimum distance between each origin and destination with the average trip length. These should correlate.

```{r calc-min-county-dist}
# create distance matrix
county_distance_matrix <- sf::st_distance(
  cprg_county,
  cprg_county
)

# unpack distance matrix
cprg_distances <- purrr::map_dfr(
  1:nrow(cprg_county),
  function(x) {
    tibble(
      origin_zone_name = cprg_county$NAME[x],
      destination_zone_name = cprg_county$NAME,
      distance_miles = units::set_units(
        county_distance_matrix[x, ],
        "miles"
      ) %>% as.numeric()
    )
  }
)
```

```{r stl-pass-county-run}
# read in county passenger 2021 StL run
passenger_od <- county21_data$od_all %>%
  filter(
    day_type == "0: All Days (M-Su)",
    day_part == "0: All Day (12am-12am)"
  ) %>%
  select(
    analysis_name, metric_group,
    mode_of_travel, origin_zone_name,
    destination_zone_name, day_type, day_part,
    average_daily_o_d_traffic_st_l_volume
  )

passenger_od_trip <- county21_data$od_trip_all %>%
  filter(
    day_type == "0: All Days (M-Su)",
    day_part == "0: All Day (12am-12am)"
  ) %>%
  select(
    analysis_name,
    origin_zone_name,
    destination_zone_name,
    day_type, day_part, avg_trip_length_mi,
    avg_all_trip_length_mi
  )

# combine with county distance data
passenger_od_distance <- passenger_od_trip %>%
  left_join(cprg_distances, join_by(origin_zone_name, destination_zone_name)) %>%
  rowwise() %>%
  mutate(
    pair_type = case_when(
      distance_miles == 0 ~ "Adjacent or same county",
      origin_zone_name == destination_zone_name ~ "Adjacent or same county",
      TRUE ~ "Non-adjacent counties"
    )
  )
```


In cases where the origin and destination counties are not adjacent, the average trip length is consistently higher than the minimum distance between the counties. 

```{r fig-trip-dist-min-dist}
#| fig-cap: "Avg. trip distance and minimum distance between counties"
#| out-width: "95%"
one_slope <- tibble(
  x = 0:max(passenger_od_distance$distance_miles + 10),
  y = 0:max(passenger_od_distance$distance_miles + 10)
)

plot_ly(
  data = passenger_od_distance,
  source = opts_current$get()$label,
  x = ~distance_miles,
  y = ~avg_all_trip_length_mi,
  color = ~pair_type,
  type = "scatter",
  mode = "markers",
  hoverinfo = "text",
  hovertemplate = ~ paste0(
    "Origin county: ", origin_zone_name, "<br>",
    "Destination county: ", destination_zone_name, "<br>",
    "Minimum distance: ", round(distance_miles, digits = 1), " miles", "<br>",
    "Average trip length: ", round(avg_all_trip_length_mi, digits = 1), " miles",
    "<extra></extra>"
  ),
  opacity = 0.7,
  colors = c(
    colors$councilBlue,
    colors$metrostatsDaPurp
  ),
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
) %>%
  add_trace(
    inherit = FALSE,
    name = "1-1 correlation",
    data = one_slope,
    type = "scatter",
    mode = "lines",
    x = ~x,
    y = ~y,
    hoverinfo = "text",
    hovertemplate = "1-1 slope <extra></extra>",
    line = list(color = "gray")
  ) %>%
  plotly_layout(
    main_title = "Avg. trip distance and minimum distance between counties",
    subtitle = "Adjacent or within counties have a minimum distance of 0 miles",
    x_title = "Minimum distance between counties (miles)",
    y_title = "Average trip distance (miles)",
    legend_title = "",
    legend = list(orientation = "h")
  )
```

We can also compare these distances with the observed average trip distance from the Met Council Travel Behavior Inventory (TBI). Read more about the TBI in @sec-tbi. 

```{r passenger-od-tbi-distance}
passenger_od_tbi_distance <- passenger_od_trip %>%
  left_join(tbi_od_ordered_trip_length, by = c(
    "origin_zone_name" = "trip_o_county",
    "destination_zone_name" = "trip_d_county"
  )) %>%
  rowwise() %>%
  mutate(
    pair_type = case_when(
      origin_zone_name == destination_zone_name ~ "Same county",
      TRUE ~ "Different county"
    )
  ) %>%
  filter(!is.na(mean_trip_dist))
```

@fig-trip-dist-tbi shows a strong positive correlation when comparing origin-destination pairs. Note that TBI origin-destination pairs with fewer than 30 observed trips were removed due to low sample size. 

```{r fig-trip-dist-tbi}
#| fig-cap:  "Avg. trip distance, Travel Behavior Inventory and StreetLight"
#| out-width: "95%"

one_slope <- tibble(
  x = 0:max(passenger_od_tbi_distance$mean_trip_dist + 10),
  y = 0:max(passenger_od_tbi_distance$mean_trip_dist + 10)
)

plot_ly(
  data = passenger_od_tbi_distance,
  source = opts_current$get()$label,
  x = ~mean_trip_dist,
  y = ~avg_all_trip_length_mi,
  color = ~pair_type,
  type = "scatter",
  mode = "markers",
  hoverinfo = "text",
  hovertemplate = ~ paste0(
    "Origin county: ", origin_zone_name, "<br>",
    "Destination county: ", destination_zone_name, "<br>",
    "StL avg. trip length: ", round(avg_all_trip_length_mi, digits = 1), " miles", "<br>",
    "TBI avg. trip length: ", round(mean_trip_dist, digits = 1), " miles", "<br>",
    "<extra></extra>"
  ),
  opacity = 0.6,
  colors = c(
    "Same county" = colors$councilBlue,
    "Different county" = colors$metrostatsDaPurp
  ),
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
) %>%
  add_trace(
    inherit = FALSE,
    name = "1-1 correlation",
    data = one_slope,
    type = "scatter",
    mode = "lines",
    x = ~x,
    y = ~y,
    hoverinfo = "text",
    hovertemplate = "1-1 slope <extra></extra>",
    line = list(color = "gray")
  ) %>%
  plotly_layout(
    main_title = "Avg. trip distance, Travel Behavior Inventory and StreetLight",
    subtitle = "",
    x_title = "TBI average trip distance (miles)",
    y_title = "StL average trip distance (miles)",
    legend_title = "",
    legend = list(orientation = "h")
  )
```


We would also expect that large counties will have longer trip lengths and smaller counties will have shorter trip lengths. 

Comparing trip distance and county area, we see a general, but weak, positive correlation (the larger the county, the longer the average trip). 

```{r fig-trip-county-area}
#| fig-cap: "Avg. distance for trips within county and county area"
#| out-width: "95%"
cprg_area <- cprg_county %>%
  mutate(area_sq_mi = sf::st_area(cprg_county) %>% units::set_units("mi^2") %>%
    as.numeric())

passenger_dist_area <- left_join(
  passenger_od_trip %>%
    filter(origin_zone_name == destination_zone_name),
  cprg_area,
  by = c("origin_zone_name" = "NAME")
)


plot_ly(
  data = passenger_dist_area,
  source = opts_current$get()$label,
  x = ~area_sq_mi,
  y = ~avg_all_trip_length_mi,
  type = "scatter",
  mode = "markers",
  hoverinfo = "text",
  hovertemplate = ~paste0(
    "County: ", origin_zone_name, "<br>",
    "County area: ", round(area_sq_mi), " sq. miles", "<br>",
    "Average trip length: ", round(avg_all_trip_length_mi, digits = 2), " miles",
    "<extra></extra>"
  ),
  opacity = 0.7,
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
) %>%
  plotly_layout(
    main_title = "Avg. trip distance within county and county area",
    subtitle = "General positive correlation",
    x_title = "County area (square miles)",
    y_title = "Average trip distance (miles)",
    legend_title = "",
    legend = list(orientation = "h")
  )
```


### Commercial  

StreetLight does not provide StreetLight Volume for 2021 commercial vehicle analyses. To measure volume for commercial traffic, we used the StreetLight Index, a relative measure of traffic volume, calibrated using AADT values to result in traffic volume [@streetlightdataStreetLightIndex2023]. 

StreetLight compares the AADT calibration values for a given zone with StreetLight’s sample size for the same zone, and creates a calibration factor to apply to the entire analysis [@streetlightdataWhatSingleFactor2023]. We generated a calibration zone set for commercial traffic by selecting road segments with both AADT and vehicle classification data in both MN and WI counties within the CPRG study area. Read more about state DOT vehicle weight distribution data in @sec-vehicle-weight-dist.  

```{r tbl-commercial-stl-sample-size}
#| tbl-cap: "StreetLight commercial travel analysis sample size"
#| out-width: "95%"
county21_truck_data$sample_size %>%
  select(
    `Data periods` = data_periods,
    `Mode of travel` = mode_of_travel,
    `Vehicle weight` = vehicle_weight,
    `Approximate device count` = approximate_device_count,
    `Approximate trip count` = approximate_trip_count
  ) %>%
  gt() %>%
  gt::opt_row_striping() %>%
  gt::fmt_number(columns = 5, decimals = 0) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  )
```

#### Calibration

StreetLight classifies commercial vehicles by Federal Highway Administration (FHWA) gross vehicle weight range (GWVR) classes: where vehicles between 14,000 lbs and 26,000 lbs (Class 4 to Class 6) are considered medium-duty, and vehicles greater than 26,000 lbs (Class 7+) are heavy-duty [@streetlightdataTruckTravelMode2023]. 

EPA's Motor Vehicle Emissions Simulator (MOVES4) has their own, slightly different vehicle classification system [@usepaPopulationActivityOnroad2023].

After reviewing MnDOT's [visual definitions of commercial vehicles](https://www.dot.state.mn.us/traffic/data/reports/wim/Definitions_of_Visual_Classifications_of_Heavy_Commercial_Vehicles.pdf), we defined MnDOT vehicle types 4-7 as medium-duty and types 8-13 as heavy-duty. We believe this configuration aligns most closely with both StreetLight's and MOVES4's vehicle classifications schemes.

However, vehicles falling in FHWA class 7 (> 26,000 lbs, < 33,000 lbs) are classified as medium duty by state DOTs, and heavy duty by StreetLight. This discrepancy is relatively small, and is unlikely to heavily influence emisssions reported.


```{r tbl-vehicle-weight-classifications}
#| tbl-cap: "Vehicle weight classifications by data source"
#| out-width: "95%"
vehicle_weight_comp <-
  tribble(
    ~`Gross vehicle weight rating (lbs)`, ~`FHWA`, ~`DOT`, ~`StreetLight`,
    "<6000", "Class 1: <6,000 lbs", "Light-duty", "Light-duty",
    "10,000", "Class 2: 6,001-10,000lbs", "Light-duty", "Light-duty",
    "14,000", "Class 3: 10,001-14,000 lbs", "Light-duty", "Light-duty",
    "16,000", "Class 4: 14,001-16,000 lbs", "Medium-duty", "Medium-duty",
    "19,500", "Class 5: 16,001-19,500 lbs", "Medium-duty", "Medium-duty",
    "26,000", "Class 6: 19,501-26,000 lbs", "Medium-duty", "Medium-duty",
    "33,000", "Class 7: 26,001-33,000 lbs", "Medium-duty", "Heavy-duty",
    ">33,000", "Class 8+: >33,001 lbs", "Heavy-duty", "Heavy-duty"
  )

gt::gt(vehicle_weight_comp,
  row_group_as_column = FALSE
) %>%
  tab_style(
    style = list(
      cell_fill(
        color = "lightgray",
        alpha = 0.5
      ),
      cell_borders(sides = "top")
    ),
    locations = cells_body(
      columns = 3:4,
      rows = 1:3
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(
        color = "lightblue",
        alpha = 0.5
      ),
      cell_borders(sides = "top")
    ),
    locations = cells_body(
      columns = 3:4,
      rows = 4:6
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(
        color = "lightblue",
        alpha = 0.5
      ),
      cell_borders(sides = "top")
    ),
    locations = cells_body(
      columns = 3,
      rows = 7
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(
        color = "lightgreen",
        alpha = 0.5
      ),
      cell_borders(sides = "top")
    ),
    locations = cells_body(
      columns = 3:4,
      rows = 8
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(
        color = "lightgreen",
        alpha = 0.5
      ),
      cell_borders(sides = "top")
    ),
    locations = cells_body(
      columns = 4,
      rows = 7
    )
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  ) %>%
  # fmt_markdown() %>%
  as_raw_html()
```

To create the calibration dataset, we found the ratio of passenger/medium/heavy-duty vehicles for at traffic count stations within our study area using state DOT data. You can read more about vehicle classification data in @sec-vehicle-weight-dist. 

## Total vehicle volume validation

To validate our county origin-destination VMT data, we can compare the county totals to the DOT reported values from MnDOT [@mndotVMTRouteSystem2021] and WisDOT [@wisdotWisconsinVehicleMiles2021]. Note that these data include all vehicle types, both passenger and commercial. 

```{r hpms-vmt}
dot_vmt <- readRDS(file.path(here::here(), "_transportation/data/dot_vmt.RDS")) %>%
  filter(year == 2021)

dot_streetlight <- left_join(
  vmt_emissions_all,
  dot_vmt,
  by = c("zone" = "county")
) %>%
  unique()
```


```{r fig-streetlight-hpms}
#| fig-cap: "County vehicle miles traveled and StreetLight Volume"
#| out-width: "95%"
plot_ly(
  data = dot_streetlight,
  source = opts_current$get()$label,
  x = ~annual_vmt,
  y = ~vmt_total,
  type = "scatter",
  mode = "markers",
  hovertemplate = ~ paste0(
    "County: ", zone, "<br>",
    "Annual VMT: ", round(annual_vmt * 1e-9, digits = 2), " billion<br>",
    "StreetLight VMT: ", round(vmt_total * 1e-9, digits = 2), " billion<br>",
    "<extra></extra>"
  ),
  opacity = 0.7,
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
) %>%
  plotly_layout(
    main_title = "County vehicle miles traveled and StreetLight Volume",
    subtitle = "Strong positive correlation",
    x_title = "Annual VMT (HPMS)",
    y_title = "StreetLight VMT",
    legend_title = "",
    legend = list(orientation = "h")
  )
```




### Limitations

- The data used for passenger traffic contains "all vehicles", not just passenger vehicles, meaning that commercial vehicles may be double counted. As a default, StreetLight suggests that users use a ratio of 96/2/2 (95% passenger, 2% medium, 2% heavy). We could apply a scaling factor of 0.96 to the passenger data to account for this.
- Commercial vehicle classifications schemes differ across data sources. 
- 

### Comparison with similar datasets

<!-- ### Data dictionary -->
<!-- Table with detailed description of columns and definitions for each data table. -->

```{r echo=FALSE}
caption_index <- readRDS(file.path(here::here(), "caption_index.RDS"))
caption_index <- as.character(as.numeric(caption_index) + 1) %>% stringr::str_pad(width = 2, side = "left", pad = "0")
saveCap(paste0("cap-", caption_index))
saveRDS(caption_index, file.path(here::here(), "caption_index.RDS"))
```
