## StreetLight Data
```{r}
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_quarto_helpers.R"))
cprg_county <- readRDS("../R/data/cprg_county.RDS")
hookaddcap()
```

[StreetLight Data](https://www.streetlightdata.com/) is a transportation analytics platform that uses aggregated location-based services (LBS) data from cell phones and navigation/GPS data to deliver insights on travel patterns. For this project, we used StreetLight to find the volume of traffic going from each county and city or township unit (CTU) to each CTU for personal and commercial traffic during 2021.

For ease of access, we used `{streetlightR}`, an R package, to interact directly with the StreetLight API. `{streetlightR}` is open-source and maintained by Council staff [^ Maintainer: Liz Roten]. 

Data source description, type

- StreetLight Data, falls in second rank. Quality rank (See @tbl-quality-rank)
- How, when, and why was the data collected?
- If this is a modeled dataset, what is the sample?
- What is the raw unit of measurement? 
- How was this data accessed? Include any relevant links/citations, code, or downloads.
- What data cleaning or wrangling was completed? How did you test these processes and outputs?
- What is the geographic and temporal scope? Did you complete any aggregation?
- What version is the data? Were there other versions available? If so, why did you choose this version?
- What assumptions are made when we use this dataset?
- Which subject matter expert (SME) reviewed this data?
- Describe testing used to verify data

Be sure to add a citation of this dataset to the Zotero shared library.

### Data characteristics

- Were there any missing data? How did you handle missing data?
- Plots, tables, and description of data distribution
- Variance, Z-Score, quantiles
- Facet views by categorical variables

### Passenger county level data

To test logical validity of trip lengths, we will compare the minimum distance between each origin and destination with the average trip length. These should correlate.

```{r}
county_distance_matrix <- sf::st_distance(cprg_county,
                                          cprg_county)
# I want a table with columns
# origin_zone_name, destination_zone_name, distance


cprg_distances <- purrr::map_dfr(
  1:nrow(cprg_county),
  function(x){
    tibble(origin_zone_name = cprg_county$NAME[x],
       destination_zone_name = cprg_county$NAME,
       distance_miles = units::set_units(county_distance_matrix[x,],
                                   "miles") %>% as.numeric())
  }
)
```

```{r}
county21_data <- readRDS("data-raw/analysis_runs/county21_data.RDS")

passenger_od <- county21_data$od_all %>% 
    filter(day_type == "0: All Days (M-Su)",
           day_part == "0: All Day (12am-12am)") %>% 
    select(analysis_name, metric_group,
           mode_of_travel, origin_zone_name,
           destination_zone_name, day_type, day_part, 
           average_daily_o_d_traffic_st_l_volume
           ) 

passenger_od_trip <- county21_data$od_trip_all %>% 
  filter(day_type == "0: All Days (M-Su)",
           day_part == "0: All Day (12am-12am)") %>% 
    select(analysis_name, 
           origin_zone_name,
           destination_zone_name,
           day_type,day_part, avg_trip_length_mi,
           avg_all_trip_length_mi) 

```


In cases where the origin and destination counties are not adjacent, the average trip length is consistently higher than the minimum distance between the counties. 


```{r fig-scatter-stl}
#| fig-cap: "A scatter plot"
passenger_od_distance <-  passenger_od_trip %>% 
  left_join(cprg_distances,  join_by(origin_zone_name, destination_zone_name)) %>% 
  rowwise() %>% 
  mutate(hovertext = paste0(
    "Origin county: ", origin_zone_name, "<br>",
    "Destination county: ", destination_zone_name, "<br>",
    "Minimum distance: ", round(distance_miles), " miles", "<br>",
    "Average trip length: ", round(avg_all_trip_length_mi), " miles",
    "<extra></extra>"
  )) %>% 
  mutate(
    pair_type = case_when(distance_miles == 0 ~ "Adjacent or same county",
                          origin_zone_name == destination_zone_name ~ "Adjacent or same county",
                          TRUE ~ "Non-adjacent counties"
  ))

one_slope <- tibble(
  x = 0:max(passenger_od_distance$distance_miles + 10),
  y = 0:max(passenger_od_distance$distance_miles + 10),
  hovertext = "1-1 slope <extra></extra>"
)

plot_ly(
  data = passenger_od_distance,
  x = ~distance_miles,
  y = ~avg_all_trip_length_mi,
  color = ~pair_type,
  type = "scatter",
  mode = "markers",
  hoverinfo = "text",
  hovertemplate = passenger_od_distance$hovertext,
  size = 4,
  opacity = 0.8,
  colors = c(colors$councilBlue,
                colors$metrostatsDaPurp)
) %>% 
  add_trace(
    inherit = FALSE,
    name = "1-1 correlation",
    data = one_slope,
    type = "scatter",
    mode = "line",
    x = ~x,
    y = ~y,
    hoverinfo = "text",
    hovertemplate = one_slope$hovertext,
    line = list(color = "gray")
  ) %>% 
  plotly_layout(
    main_title = "Trip distance and minimum distance between counties",
    x_title = "Minimum distance between counties (miles)",
    y_title = "Average trip distance (miles)",
    legend_title = "",
    legend = list(orientation = "h")
  )

```


```{r fig-boxplot-stl}
#| fig-cap: "A boxplot"
shinipsum::random_ggplotly(type = "boxplot") %>%
  councilR::plotly_layout(
    main_title = "Boxplot"
  )
```


```{r fig-density-stl}
#| fig-cap: "A density plot"
shinipsum::random_ggplotly(type = "density") %>%
  councilR::plotly_layout(
    main_title = "Density"
  )
```


### Limitations



### Comparison with similar datasets

Compare with county level MnDOT data

```{r}
mndot_vmt <- readRDS("data-raw/mndot/mndot_vmt_county.RDS")
```


### Data dictionary

Table with detailed description of columns and definitions for each data table.

```{r echo=FALSE}
saveCap("stl-data")
```
