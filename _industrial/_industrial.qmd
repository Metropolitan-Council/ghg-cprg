# Industrial
```{r include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  fig.pos = "H",
  out.width = "100%",
  dpi = 300
)


knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
source(file.path(here::here(), "R/_quarto_helpers.R"))
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_plotting_helpers.R"))

hookaddcap()

# load in necessary data frames for comparison
baseline_emissions <- readRDS(file.path(here::here(), "_industrial/data/modeled_industrial_baseline_emissions.RDS")) %>%
  # check on this later
  filter(!is.na(value_emissions))
ghgrp_emissions <- readRDS(file.path(here::here(), "_industrial/data/ghgrp_industrial_point_sources_ctu.rds"))
nei_emissions <- readRDS(file.path(here::here(), "_industrial/data/nei_county_industrial_emissions.RDS"))
subpart_c_emissions <- readRDS(file.path(here::here(), "_industrial/data/fuel_combustion_emissions.RDS"))
mpca_emissions <- readRDS(file.path(here::here(), "_industrial/data/mpca_fuel_emissions.RDS"))

# calculate some useful summary numbers
county_emissions <- readRDS(file.path(here::here(), "_meta/data/cprg_county_emissions.RDS"))
cprg_county <- readRDS(file.path(here::here(), "_meta/data/cprg_county.RDS"))

emissions_2021 <- county_emissions %>%
  filter(emissions_year == 2021) %>%
  pull(value_emissions) %>%
  sum()
ind_emissions_2021 <- county_emissions %>%
  filter(emissions_year == 2021, sector == "Industrial") %>%
  pull(value_emissions) %>%
  sum()
refinery_emissions_2021 <- ghgrp_emissions %>%
  filter(inventory_year == 2021, primary_naics_code == 324110) %>%
  pull(value_emissions) %>%
  sum()

ind_emissions_2011 <- county_emissions %>%
  filter(emissions_year == 2011, sector == "Industrial") %>%
  pull(value_emissions) %>%
  sum()

ind_emissions_2005 <- county_emissions %>%
  filter(emissions_year == 2005, sector == "Industrial") %>%
  pull(value_emissions) %>%
  sum()

### remove emissions counted in baseline (GHGRP+MPCA) and GHGRP doublecount to find missing small industrial from NEI
nei_small <- left_join(
  nei_emissions %>%
    group_by(inventory_year, county_name) %>%
    summarize(values_emissions = sum(values_emissions)),
  # pull out doublecounts from GHGRP
  ghgrp_emissions %>%
    filter(
      inventory_year %in% c(2017, 2020),
      doublecount == "Yes"
    ) %>%
    group_by(inventory_year, county_name) %>%
    summarize(value_emissions_double = sum(value_emissions)),
  by = c("county_name", "inventory_year"),
  suffix = c("_NEI", "_GHGRP")
) %>%
  left_join(baseline_emissions %>%
    filter(inventory_year %in% c(2017, 2020)) %>%
    group_by(inventory_year, county_name) %>%
    summarize(value_emissions_inv = sum(value_emissions))) %>%
  mutate(
    value_emissions_double = if_else(is.na(value_emissions_double), 0, value_emissions_double),
    value_emissions_inv = if_else(is.na(value_emissions_inv), 0, value_emissions_inv),
  ) %>%
  mutate(
    value_emissions = as.numeric(values_emissions) - (value_emissions_double + value_emissions_inv),
    value_emissions = if_else(value_emissions < 0, 0, value_emissions),
    data_source = "NEI - small industry"
  ) %>%
  select(county_name, value_emissions, data_source, inventory_year)
```

## Introduction
Industrial facilities are major emitters stemming from high electricity demand, on-site fuel combustion, and industrial processes. The data presented here are aggregations of industrial point source reporting to state and federal agencies. Care must be taken to avoid double-counting in this sector, as industry includes emissions from power plants, waste facilities, and natural gas combustion that can be counted in other sectors. Natural gas combustion is the most difficult class to account for, as natural gas is delivered both within and without the services of utilities. Additionally, smaller emitters are not required to report to state and federal agencies, meaning a small but potentially significant slice of industrial emissions may be missing.

## Results

### 2021 county and subsector breakdown

Industry accounted for `r 100*round(ind_emissions_2021/emissions_2021, digits = 3)`% of total emissions in the 11-county region in 2021. County emissions vary widely and seemingly randomly due to the point source approach of industrial emissions, as opposed to the demand-side approach of electricity, residential building fuel, waste, and functionally on-road transportation. The largest example is that two oil refineries in Dakota County account for `r 100*round(refinery_emissions_2021/ind_emissions_2021, digits = 3)`% of industrial emissions in 2021.

```{r fig-ind-county-emissions}
#| fig-cap: "2021 county industrial emissions"
#| out-width: "95%"
#| fig.height: 4  # Set height in inches
#| fig.width: 10   # Set width in inches


fig_ind_county_emissions <- plot_ly(
  type = "bar",
  source = "fig-ind-county-emissions",
  data = county_emissions %>%
    filter(
      sector == "Industrial",
      emissions_year == 2021
    ),
  y = ~ reorder(county_name, value_emissions),
  x = ~value_emissions,
  color = ~category,
  colors = unlist(category_colors),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    source, "<br>",
    round(value_emissions / 1000000, digits = 2), " million metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "2021 county industrial emissions",
    x_title = "Million metric tons CO<sub>2</sub>e",
    subtitle = ""
  ) %>%
  layout(
    barmode = "stack",
    legend = list(
      traceorder = "reversed"
    ),
    hoverlabel = list(
      font = list(
        color = "black" # Set hovertext color to black
      )
    )
  )

fig_ind_county_emissions
```

### Baseline emissions

Regional industrial emissions have increased by `r 100*round((ind_emissions_2021- ind_emissions_2005)/ind_emissions_2005, digits = 3)`% since 2005, although emissions prior to 2011 are modeled by anchoring to MN Pollution Control Agency industrial emissions, which may or may not adequately represent metro region emissions. Emissions compared to 2011, the earliest year of federally supplied GHG data, there is a much more modest observed increase of `r 100*round((ind_emissions_2021 - ind_emissions_2011)/ind_emissions_2011, digits = 3)`%.

```{r fig-ind-baseline-emissions}
#| fig-cap: "Baseline industrial emissions"
#| out-width: "95%"
#| fig.height: 4  # Set height in inches
#| fig.width: 8   # Set width in inches

fig_ind_baseline <- plot_ly(
  source = "fig-ind-baseline-emissions",
  data = county_emissions %>%
    filter(
      sector == "Industrial",
      emissions_year <= 2022
    ) %>%
    group_by(emissions_year, category) %>%
    summarise(value_emissions = sum(value_emissions)),
  x = ~emissions_year,
  y = ~value_emissions,
  color = ~category, #
  colors = unlist(category_colors), # Directly map the colors to categories
  type = "scatter",
  mode = "lines", # No points or lines, just fill
  stackgroup = "one", # Fill to the next y value (stacking)
  hoverinfo = "x+y+name", # Ensure hover displays x, y, and category name
  hovertemplate = ~ paste0(
    "Year: %{x}<br>",
    "Category: %{text}<br>",
    "Emissions: %{y:.2f} metric tons CO<sub>2</sub>e<br>",
    "<extra></extra>"
  ),
  text = ~category # Pass category to hovertext
) %>%
  plotly_layout(
    main_title = "Industrial Emissions Over Time",
    x_title = "Year",
    y_title = "Million metric tons CO<sub>2</sub>e",
    subtitle = ""
  ) %>%
  layout(
    hovermode = "x unified", # Combine all hovertext under one hover
    hoverlabel = list(
      font = list(
        color = "black" # Set hovertext color to black
      )
    )
  )

fig_ind_baseline
```

### Scaling to CTUs

As industrial emissions are provided as point sources, scaling to cities is already done. Note that the color ramp in the map below is on a log scale due to the oil refinery in Rosemount - pop-up values are reported as untransformed values, however.

```{r fig-ctu-ind-emissions}
# load the county boundaries layer

ind_emissions_ctu_2021 <- baseline_emissions %>%
  filter(inventory_year == 2021) %>%
  group_by(city_name) %>%
  summarize(mt_co2e = sum(value_emissions))

### map CTU scale agricultural emissions

cprg_ctu_9 <- councilR::import_from_gpkg("https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_dot/bdry_mn_city_township_unorg/gpkg_bdry_mn_city_township_unorg.zip") %>%
  filter(COUNTY_NAME %in% c(cprg_county$county_name)) %>%
  mutate(
    STATEFP = "27",
    STATE = "Minnesota",
    STATE_ABB = "MN"
  ) %>%
  select(
    CTU_NAME = FEATURE_NAME,
    CTU_CLASS,
    COUNTY_NAME,
    STATEFP,
    STATE,
    STATE_ABB,
    GNIS_FEATURE_ID,
    geometry = SHAPE
  ) %>%
  arrange(CTU_NAME)


ctu_ind_map <- left_join(
  cprg_ctu_9 %>%
    rename(city_name = CTU_NAME),
  ind_emissions_ctu_2021,
  by = "city_name"
) %>%
  select(city_name, geometry, mt_co2e)


# Define color palette based on the plasma scale from viridis
pal <- colorNumeric(palette = "Greys", domain = log10(ctu_ind_map$mt_co2e + 1), na.color = "white")

# Create the leaflet map
map_ctu_ind <- leaflet(ctu_ind_map) %>%
  addTiles() %>% # Add default OpenStreetMap tiles
  addPolygons(
    fillColor = ~ pal(log10(mt_co2e + 1)),
    color = "black", # Border color
    weight = 1,
    fillOpacity = 0.9, # Transparency of the fill color
    popup = ~ paste(city_name, " industrial emissions:", round(mt_co2e, 2)), # Popup with details
    label = ~ paste(city_name, " emissions:", round(mt_co2e, 2)), # Hover text
    highlightOptions = highlightOptions(
      weight = 3,
      color = "blue",
      bringToFront = TRUE
    )
  )

map_ctu_ind
```

```{r echo=FALSE}
caption_index <- readRDS(file.path(here::here(), "caption_index.RDS"))
caption_index <- as.character(as.numeric(caption_index) + 1) %>% stringr::str_pad(width = 2, side = "left", pad = "0")
saveCap(paste0("cap-", caption_index))
saveRDS(caption_index, file.path(here::here(), "caption_index.RDS"))
```
