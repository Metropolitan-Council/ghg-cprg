# Industrial emissions
```{r include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  fig.pos = "H",
  out.width = "100%",
  dpi = 300
)


knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
source(file.path(here::here(), "R/_quarto_helpers.R"))
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_plotting_helpers.R"))

hookaddcap()

# load in necessary data frames for comparison
baseline_emissions <- readRDS(file.path(here::here(), "_industrial/data/modeled_industrial_baseline_emissions.RDS")) %>% 
  # check on this later
  filter(!is.na(value_emissions))
ghgrp_emissions <- readRDS(file.path(here::here(), "_industrial/data/ghgrp_industrial_point_sources_ctu.rds"))
nei_emissions <- readRDS(file.path(here::here(), "_industrial/data/nei_county_industrial_emissions.RDS"))
subpart_c_emissions <- readRDS(file.path(here::here(), "_industrial/data/fuel_combustion_emissions.RDS"))
mpca_emissions <- readRDS(file.path(here::here(), "_industrial/data/mpca_fuel_emissions.RDS"))

# calculate some useful summary numbers
county_emissions <- readRDS(file.path(here::here(), "_meta/data/cprg_county_emissions.RDS"))
cprg_county <- readRDS(file.path(here::here(), "_meta/data/cprg_county.RDS"))

emissions_2021 <- county_emissions %>%
  filter(year == 2021) %>%
  pull(emissions_metric_tons_co2e) %>%
  sum()
ind_emissions_2021 <- county_emissions %>%
  filter(year == 2021, sector == "Industrial") %>%
  pull(emissions_metric_tons_co2e) %>%
  sum()
ag_emissions_2005 <- county_emissions %>%
  filter(year == 2005, sector == "Agriculture") %>%
  pull(emissions_metric_tons_co2e) %>%
  sum()

### remove emissions counted in baseline (GHGRP+MPCA) and GHGRP doublecount to find missing small industrial from NEI 
nei_small <- left_join(nei_emissions %>% 
              group_by(inventory_year, county_name) %>% 
              summarize(values_emissions = sum(values_emissions)),
              # pull out doublecounts from GHGRP
            ghgrp_emissions %>% 
              filter(inventory_year %in% c(2017,2020),
                     doublecount == "Yes") %>% 
              group_by(inventory_year, county_name) %>% 
              summarize(value_emissions_double = sum(value_emissions)),
            by = c("county_name","inventory_year"),
            suffix = c("_NEI","_GHGRP")) %>% 
  left_join(baseline_emissions %>% 
              filter(inventory_year  %in% c(2017,2020)) %>% 
              group_by(inventory_year, county_name) %>% 
              summarize(value_emissions_inv = sum(value_emissions))
            ) %>% 
  mutate(value_emissions_double = if_else(is.na(value_emissions_double),0,value_emissions_double),
         value_emissions_inv = if_else(is.na(value_emissions_inv),0,value_emissions_inv),
         ) %>% 
  mutate(value_emissions = as.numeric(values_emissions) - (value_emissions_double + value_emissions_inv),
         value_emissions = if_else(value_emissions < 0,0, value_emissions),
         data_source = "NEI - small industry") %>% 
  select(county_name,value_emissions, data_source, inventory_year)

```

## Introduction
Industrial facilities are major emitters stemming from high electricity demand, on-site fuel combustion, and industrial processes. The data presented here are aggregations of industrial point source reporting to state and federal agencies. Care must be taken to avoid double-counting in this sector, as industry includes emissions from power plants, waste facilities, and natural gas combustion that can be counted in other sectors. Natural gas combustion is the most difficult class to account for, as natural gas is delivered both within and without the services of utilities. Additionally, smaller emitters are not required to report to state and federal agencies, meaning a small but potentially significant slice of industrial emissions may be missing.

## Results

### 2021 county and subsector breakdown

Industry accounted for `r 100*round(ag_emissions_2021/emissions_2021, digits = 3)`% of total emissions in the 11-county region in 2021. As expected, more rural counties produce a larger share of the agricultural emissions, with St. Croix, Pierce, Dakota, and Carver accounting for `r 100*round(rural_ag_2021/ag_emissions_2021, digits = 3)`% of the regions agricultural emissions.

```{r fig-emissions-source-comparison}
#| fig-cap: "Comparison of 2020 industrial emissions from FLIGHT, MPCA, NEI"
#| out-width: "95%"

industrial_emissions <- bind_rows(mpca_emissions %>% 
                                    filter(sector == "Industrial") %>% 
                                    group_by(county_name, inventory_year) %>% 
                                  summarize(value_emissions = sum(value_emissions)) %>% 
                                    mutate(source = "MPCA"),
                                  flight_emissions %>% 
                                    filter(doublecount == "No") %>% 
                                    group_by(county_name, inventory_year) %>% 
                                  summarize(value_emissions = sum(value_emissions)) %>% 
                                    mutate(source = "FLIGHT"),
                                  ghgrp_emissions %>% 
                                    filter(doublecount == "No") %>% 
                                    group_by(county_name, inventory_year) %>% 
                                  summarize(value_emissions = sum(value_emissions)) %>% 
                                    mutate(source = "GHGRP"),
                                  nei_no_doublecount %>% select(-data_source) %>% 
                                    rename(value_emissions = values_emissions) %>% 
                                    mutate(source = "NEI"))
                                  
fig_industrial_emissions <- plot_ly(
  data = industrial_emissions %>% 
    filter(inventory_year == 2020),
  source = "fig-emissions-source-comparison",
  x = ~county_name,
  y = ~value_emissions,
  color = ~source,
  type = "bar",
  # colors = c(
  #   "EIA" = cprg_colors$cprg_da_yellow,
  #   "Metropolitan Council" = colors$councilBlue
  # ),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    source, "<br>",
    round(value_emissions / 1000, digits = 2), " thousand metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Industrial Data Source Comaparison",
    y_title = "Metric tons CO<sub>2</sub>e",
    x_title = "County",
    legend_title = "Data source"
  ) %>%
  layout(
    barmode = "group",
    hovermode = "closest",
    legend = list(
      traceorder = "normal"
    )
  )

fig_industrial_emissions

```

Currently, we are seeing large deviations (high and low) between MPCA data and federal sources, particularly in Dakota (Refinery) and Hennepin counties. MPCA data only accounts for fuel combustion, not process emissions.

Currently, GHGRP and MPCA data can be reliably used to avoid double-counting by avoiding emissions from Natural Gas. We can compare how subpart C (Industrial combustion) analyses compares to facilities with only subpart C FLIGHT aggregates.

```{r fig-subpart-c-emissions}
#| fig-cap: "Comparison of industrial combustion emissions from FLIGHT and subpart C analysis"
#| out-width: "95%"


subpart_c <- flight_emissions %>% 
  filter(subparts == "C") %>% 
  left_join(., subpart_c_emissions %>% 
              filter(industry_type_subparts  == 'C') %>% 
              group_by(facility_id, reporting_year) %>% 
              summarise(value_emissions = sum(values_emissions)),
            by = c("ghgrp_id" = "facility_id",
                   "inventory_year" = "reporting_year"),
            suffix = c("_flight","_subpart"))


fig_subpart_c_comparison <- plot_ly(
  type = "scatter",
  mode = "markers",
  source = "fig-subpart-c-emissions",
  data = subpart_c,
  y = ~value_emissions_flight,
  x = ~value_emissions_subpart,
  color = ~ as.character(inventory_year),  # Map colors by year
  hovertemplate = ~ paste0(
    facility_name, "<br>",
    "FLIGHT emissions: ", round(value_emissions_flight, digits = 2), " metric tons CO<sub>2</sub>e", "<br>",
    "SUBPART C Emissions: ", round(value_emissions_subpart, digits = 2), " metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  ),
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
)

fig_subpart_c_comparison <- fig_subpart_c_comparison %>%
  add_trace(
    type = "scatter",
    mode = "lines",
    x = c(0, max(subpart_c$value_emissions_subpart, na.rm = TRUE)),
    y = c(0, max(subpart_c$value_emissions_subpart, na.rm = TRUE)),
    line = list(
      dash = "dash",
      color = "black",
      width = 2
    ),
    showlegend = FALSE,  # Hide this trace from the legend
    inherit = FALSE,     # Ensure no properties are inherited from the previous trace
    hoverinfo = "none"   # Disable hover for this line
  )

fig_subpart_c_comparison

```

Most emissions are on or sufficiently close to the one-to-one line. The exception is the Hennepin Energy Recovery Center, a waste burning facility. This requires further exploration but will be omitted in any case as waste-to-energy emissions are counted in the waste subsector.

```{r fig-stationary-combustion}

# compare fuel combustion to ghgrp stationary combustion
stationary_combustion <- ghgrp_emissions %>% 
  filter(source == "stationary_combustion") %>% 
  left_join(., subpart_c_emissions %>% 
              group_by(facility_id, reporting_year) %>% 
              summarise(value_emissions = sum(values_emissions)),
            by = c("facility_id" = "facility_id",
                   "inventory_year" = "reporting_year"),
            suffix = c("_ghgrp","_subpart"))

fig_stationary_combustion <- plot_ly(
  type = "scatter",
  mode = "markers",
  source = "fig-stationary-combustion",
  data = stationary_combustion,
  y = ~value_emissions_ghgrp,
  x = ~value_emissions_subpart,
  color = ~ as.character(inventory_year),  # Map colors by year
  hovertemplate = ~ paste0(
    facility_name, "<br>",
    "GHGRP emissions: ", round(value_emissions_ghgrp, digits = 2), " metric tons CO<sub>2</sub>e", "<br>",
    "SUBPART C Emissions: ", round(value_emissions_subpart, digits = 2), " metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  ),
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
)

fig_stationary_combustion <- fig_stationary_combustion %>%
  add_trace(
    type = "scatter",
    mode = "lines",
    x = c(0, max(stationary_combustion$value_emissions_subpart, na.rm = TRUE)),
    y = c(0, max(stationary_combustion$value_emissions_subpart, na.rm = TRUE)),
    line = list(
      dash = "dash",
      color = "black",
      width = 2
    ),
    showlegend = FALSE,  # Hide this trace from the legend
    inherit = FALSE,     # Ensure no properties are inherited from the previous trace
    hoverinfo = "none"   # Disable hover for this line
  )

fig_stationary_combustion

```

When comparing subpart C analysis of fuel combustion to the EPA provided 'stationary combustion' category of the GHG RP, we see general agreement, with our subpart analysis appear to overpredict emissions from HERC and the large in-bounds oil refinery of the region, relative to the EPA data. As the refinery emits via hydrogen production and natural gas flaring, it is possible those emissions are otherwise categorized in GHG RP.


# Natural Gas

Given overall compliance between our subpart C analysis and EPA reporting, natural gas combustion can be pulled out from a subpart C analysis and compared to our estimates of utility-supplied natural gas deliveries to the industrial sector (via NREL).

```{r fig-natural-gas-comparison}
#| fig-cap: "Comparison of natural gas combustion data"
#| out-width: "95%"

natural_gas_c_2021 <- subpart_c_emissions %>% 
  filter(specific_fuel_type == "Natural Gas",
         reporting_year == 2021) %>% 
  group_by(county_name,
           reporting_year) %>% 
  summarize(value_emissions = sum(values_emissions)) %>% 
  mutate(data_source = "GHGRP - Natural Gas Combustion")

mpca_natural_gas <- mpca_emissions %>% 
  filter(fuel_type == "Natural Gas",
         inventory_year == 2021) %>% 
  group_by(county_name, inventory_year) %>% 
  summarize(value_emissions = sum(value_emissions)) %>% 
  mutate(data_source = "MPCA - Natural Gas Combustion")

natural_gas_comp <-  bind_rows(nrel_emissions %>% 
  filter(year == 2021) %>% 
    mutate(data_source = "NREL") %>% 
  select(inventory_year = year,
         county_name = geog_name,
         value_emissions = emissions_metric_tons_co2e,
         data_source),
 natural_gas_c_2021 %>% 
   rename(inventory_year = reporting_year),
 mpca_natural_gas
 )

  
fig_industrial_ng_emissions <- plot_ly(
  data = natural_gas_comp,
  source = "fig-natural-gas-comparison",
  x = ~county_name,
  y = ~value_emissions,
  color = ~data_source,
  type = "bar",
  # colors = c(
  #   "EIA" = cprg_colors$cprg_da_yellow,
  #   "Metropolitan Council" = colors$councilBlue
  # ),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    data_source, "<br>",
    round(value_emissions / 1000, digits = 2), " thousand metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Industrial Natural Gas Emissions Inventory Comaparison",
    y_title = "Metric tons CO<sub>2</sub>e",
    x_title = "County",
    legend_title = "Data source"
  ) %>%
  layout(
    barmode = "group",
    hovermode = "closest",
    legend = list(
      traceorder = "normal"
    )
  )

fig_industrial_ng_emissions

```


```{r fig-natural-gas-comparison}
#| fig-cap: "Comparison of natural gas combustion data"
#| out-width: "95%"

natural_gas_c_2020 <- subpart_c_emissions %>% 
  filter(specific_fuel_type == "Natural Gas",
         reporting_year == 2020) %>% 
  group_by(county_name,
           reporting_year) %>% 
  summarize(values_emissions = sum(values_emissions)) %>% 
  mutate(data_source = "GHGRP - Fuel combustion")

nei_2020_no_doublecount <- left_join(nei_emissions %>% 
            filter(inventory_year == 2020) %>% 
              group_by(county_name) %>% 
              summarize(values_emissions = sum(values_emissions)),
            flight_emissions %>% 
              filter(inventory_year == 2020,
                     doublecount == "Yes") %>% 
              group_by(county_name) %>% 
              summarize(values_emissions = sum(value_emissions)),
            by = "county_name",
            suffix = c("_NEI","_FLIGHT")) %>% 
  mutate(values_emissions_FLIGHT = if_else(is.na(values_emissions_FLIGHT),0,values_emissions_FLIGHT)) %>% 
  mutate(values_emissions = as.numeric(values_emissions_NEI) - values_emissions_FLIGHT,
         data_source = "NEI - all",
         inventory_year = 2020) %>% 
  select(county_name,values_emissions, data_source, inventory_year)
         

natural_gas_comp2 <-  bind_rows(nrel_emissions %>% 
  filter(year == 2021) %>% 
    mutate(data_source = "NREL") %>% 
  select(inventory_year = year,
         county_name = geog_name,
         values_emissions = emissions_metric_tons_co2e,
         data_source),
 nei_emissions %>% 
            filter(inventory_year == 2020,
                   sector_three == "Natural Gas") %>% 
   ungroup() %>% 
   mutate(data_source = "NEI - NG combustion",
          values_emissions = as.numeric(values_emissions)) %>% 
  select(inventory_year,
         county_name,
         values_emissions,
         data_source),
 natural_gas_c_2020 %>% 
   rename(inventory_year = reporting_year)
 )
  
fig_industrial_ng_emissions2 <- plot_ly(
  data = natural_gas_comp2,
  source = "fig-natural-gas-comparison",
  x = ~county_name,
  y = ~values_emissions,
  color = ~data_source,
  type = "bar",
  # colors = c(
  #   "EIA" = cprg_colors$cprg_da_yellow,
  #   "Metropolitan Council" = colors$councilBlue
  # ),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    data_source, "<br>",
    round(values_emissions / 1000, digits = 2), " thousand metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Industrial Natural Gas Emissions Inventory Comaparison",
    y_title = "Metric tons CO<sub>2</sub>e",
    x_title = "County",
    legend_title = "Data source"
  ) %>%
  layout(
    barmode = "group",
    hovermode = "closest",
    legend = list(
      traceorder = "normal"
    )
  )

fig_industrial_ng_emissions2

```

### Scaling to CTUs


