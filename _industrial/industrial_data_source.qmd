# Industrial methods and data sources
```{r include=FALSE}
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_quarto_helpers.R"))
source(file.path(here::here(), "R/_plotting_helpers.R"))

hookaddcap()

# load in necessary data frames for comparison
county_emissions <- readRDS(file.path(here::here(), "_meta/data/cprg_county_emissions.RDS"))
flight_emissions <- readRDS(file.path(here::here(), "_industrial/data/flight_industrial_point_sources_ctu.RDS"))
ghgrp_emissions <- readRDS(file.path(here::here(), "_industrial/data/ghgrp_industrial_point_sources_ctu.rds"))
nei_emissions <- readRDS(file.path(here::here(), "_industrial/data/nei_county_industrial_emissions.RDS"))
subpart_c_emissions <- readRDS(file.path(here::here(), "_industrial/data/fuel_combustion_emissions.RDS"))
nrel_emissions <- county_emissions %>%
  filter(category == "Industrial energy" & source == "Natural gas")
mpca_emissions <- readRDS(file.path(here::here(), "_industrial/data/mpca_fuel_emissions.RDS"))

### remove doublecount from NEI emissions with FLIGHT data
nei_no_doublecount <- left_join(
  nei_emissions %>%
    group_by(inventory_year, county_name) %>%
    summarize(values_emissions = sum(values_emissions)),
  flight_emissions %>%
    filter(
      inventory_year %in% c(2017, 2020),
      doublecount == "Yes"
    ) %>%
    group_by(inventory_year, county_name) %>%
    summarize(values_emissions = sum(value_emissions)),
  by = c("county_name", "inventory_year"),
  suffix = c("_NEI", "_FLIGHT")
) %>%
  mutate(values_emissions_FLIGHT = if_else(is.na(values_emissions_FLIGHT), 0, values_emissions_FLIGHT)) %>%
  mutate(
    values_emissions = as.numeric(values_emissions_NEI) - values_emissions_FLIGHT,
    data_source = "NEI - all"
  ) %>%
  select(county_name, values_emissions, data_source, inventory_year)
```

##Summary
Industrial emissions are derived MN Pollution Control Agency (MPCA) fuel combustion data from two EPA sources: the Greenhouse Gas Reporting Program (GHGRP; via FLIGHT: Facility Level Information on GHG Tool) and the National Emissions Inventory (NEI). These datasets have strengths and limitations which complement one another. The MPCA data has smaller facilities and commercial fuel combustion, but dates back only to 2016. GHGRP has facility source data dating back to 2010, but only facilities with 25,000+ metric tons of annual CO2e emissions are required to report to this program. The NEI aggregate county data includes smaller facilities, but only has GHG emission estimates for 2017 and 2020 and lacks the source level specificity. Additional data resources may be available via the federal US Energy Information Administration datasets.

## Double counting
A key concern for industrial emissions is avoiding double counting, particularly natural gas combustion, electricity generation, and waste management. Our energy analysis uses a demand side approach to allocate electricity usage and natural gas combustion to residential, commercial, and industrial sectors. For electricity, this means avoiding industrial emissions that arise from electricty generation (note GHGRP and NEI already avoid counting electricity consumption at industrial facilities in their analyses). Natural gas consumption requires greater care, as combustion for industrial units (e.g. boilers) may be one of or some combination of natural gas, petroleum products, coal, or other fuel sources; additionally utility provisioning of natural gas may not account for all natural gas combustion at industrial sources. Our waste sector accounts for municipal waste emissions, though it does not inventory industrial waste processing.

## Electricity generation
Electricity generation is indicated as industrial subpart "D", and can be omitted from GHGRP data easily. Note that power plants also have some fuel combustion that are not directly for electricity generation and it is currently unclear if that is accounted for in our egrid analysis. However, in NEI data, powerplants are grouped under NEC (Not Elsewhere Classified), which includes non-powerpoint sources, requiring care to avoid double-counting (e.g. subtracting away GHGRP power plant data)

## Natural gas
Detailed data can be found in the GHGRP, particularly for fuel combustion. That allows us to subtract away natural gas combustion emissions from industrial combustion, to avoid potential double counting of natural gas utility data. Note that further inquiry is required to ensure that industrial natural gas is provisioned by the utilities. An additional subpart that requires investigation is "Y" which includes flaring data, which is often flaring of natural gas. MPCA data separates gas consumption for flaring.

## Waste
We are omitting in-bound municipal waste facilities from our industrial analysis to avoid double counting with our waste emissions analyses (based on county waste volume in Minnesota). Industrial waste facilities will be analyzed here.


# Data source comparisons

Due to the reasons listed above, the expectation should be that MPCA (smaller facilities, no process emissions), GHGRP (only larger facilities), and NEI (all facilities, no point source specificity means double-counting) provide substantially different values. 

```{r fig-emissions-source-comparison}
#| fig-cap: "Comparison of 2020 industrial emissions from FLIGHT, MPCA, NEI"
#| out-width: "95%"

industrial_emissions <- bind_rows(
  mpca_emissions %>%
    filter(sector == "Industrial") %>%
    group_by(county_name, inventory_year) %>%
    summarize(value_emissions = sum(value_emissions)) %>%
    mutate(source = "MPCA"),
  flight_emissions %>%
    filter(doublecount == "No") %>%
    group_by(county_name, inventory_year) %>%
    summarize(value_emissions = sum(value_emissions)) %>%
    mutate(source = "FLIGHT"),
  ghgrp_emissions %>%
    filter(doublecount == "No") %>%
    group_by(county_name, inventory_year) %>%
    summarize(value_emissions = sum(value_emissions)) %>%
    mutate(source = "GHGRP"),
  nei_no_doublecount %>% select(-data_source) %>%
    rename(value_emissions = values_emissions) %>%
    mutate(source = "NEI")
)

fig_industrial_emissions <- plot_ly(
  data = industrial_emissions %>%
    filter(inventory_year == 2020),
  source = "fig-emissions-source-comparison",
  x = ~county_name,
  y = ~value_emissions,
  color = ~source,
  type = "bar",
  # colors = c(
  #   "EIA" = cprg_colors$cprg_da_yellow,
  #   "Metropolitan Council" = colors$councilBlue
  # ),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    source, "<br>",
    round(value_emissions / 1000, digits = 2), " thousand metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Industrial Data Source Comaparison",
    y_title = "Metric tons CO<sub>2</sub>e",
    x_title = "County",
    legend_title = "Data source"
  ) %>%
  layout(
    barmode = "group",
    hovermode = "closest",
    legend = list(
      traceorder = "normal"
    )
  )

fig_industrial_emissions
```

Currently, we are seeing large deviations (high and low) between MPCA data and federal sources, particularly in Dakota (Refinery) and Hennepin counties. MPCA data only accounts for fuel combustion, not process emissions.

Currently, GHGRP and MPCA data can be reliably used to avoid double-counting by avoiding emissions from Natural Gas. We can compare how subpart C (Industrial combustion) analyses compares to facilities with only subpart C FLIGHT aggregates.

```{r fig-subpart-c-emissions}
#| fig-cap: "Comparison of industrial combustion emissions from FLIGHT and subpart C analysis"
#| out-width: "95%"


subpart_c <- flight_emissions %>%
  filter(subparts == "C") %>%
  left_join(., subpart_c_emissions %>%
    filter(industry_type_subparts == "C") %>%
    group_by(facility_id, reporting_year) %>%
    summarise(value_emissions = sum(values_emissions)),
  by = c(
    "ghgrp_id" = "facility_id",
    "inventory_year" = "reporting_year"
  ),
  suffix = c("_flight", "_subpart")
  )


fig_subpart_c_comparison <- plot_ly(
  type = "scatter",
  mode = "markers",
  source = "fig-subpart-c-emissions",
  data = subpart_c,
  y = ~value_emissions_flight,
  x = ~value_emissions_subpart,
  color = ~ as.character(inventory_year), # Map colors by year
  hovertemplate = ~ paste0(
    facility_name, "<br>",
    "FLIGHT emissions: ", round(value_emissions_flight, digits = 2), " metric tons CO<sub>2</sub>e", "<br>",
    "SUBPART C Emissions: ", round(value_emissions_subpart, digits = 2), " metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  ),
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
)

fig_subpart_c_comparison <- fig_subpart_c_comparison %>%
  add_trace(
    type = "scatter",
    mode = "lines",
    x = c(0, max(subpart_c$value_emissions_subpart, na.rm = TRUE)),
    y = c(0, max(subpart_c$value_emissions_subpart, na.rm = TRUE)),
    line = list(
      dash = "dash",
      color = "black",
      width = 2
    ),
    showlegend = FALSE, # Hide this trace from the legend
    inherit = FALSE, # Ensure no properties are inherited from the previous trace
    hoverinfo = "none" # Disable hover for this line
  )

fig_subpart_c_comparison
```

Most emissions are on or sufficiently close to the one-to-one line. The exception is the Hennepin Energy Recovery Center, a waste burning facility. This requires further exploration but will be omitted in any case as waste-to-energy emissions are counted in the waste subsector.

```{r fig-stationary-combustion}
# compare fuel combustion to ghgrp stationary combustion
stationary_combustion <- ghgrp_emissions %>%
  filter(source == "stationary_combustion") %>%
  left_join(., subpart_c_emissions %>%
    group_by(facility_id, reporting_year) %>%
    summarise(value_emissions = sum(values_emissions)),
  by = c(
    "facility_id" = "facility_id",
    "inventory_year" = "reporting_year"
  ),
  suffix = c("_ghgrp", "_subpart")
  )

fig_stationary_combustion <- plot_ly(
  type = "scatter",
  mode = "markers",
  source = "fig-stationary-combustion",
  data = stationary_combustion,
  y = ~value_emissions_ghgrp,
  x = ~value_emissions_subpart,
  color = ~ as.character(inventory_year), # Map colors by year
  hovertemplate = ~ paste0(
    facility_name, "<br>",
    "GHGRP emissions: ", round(value_emissions_ghgrp, digits = 2), " metric tons CO<sub>2</sub>e", "<br>",
    "SUBPART C Emissions: ", round(value_emissions_subpart, digits = 2), " metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  ),
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
)

fig_stationary_combustion <- fig_stationary_combustion %>%
  add_trace(
    type = "scatter",
    mode = "lines",
    x = c(0, max(stationary_combustion$value_emissions_subpart, na.rm = TRUE)),
    y = c(0, max(stationary_combustion$value_emissions_subpart, na.rm = TRUE)),
    line = list(
      dash = "dash",
      color = "black",
      width = 2
    ),
    showlegend = FALSE, # Hide this trace from the legend
    inherit = FALSE, # Ensure no properties are inherited from the previous trace
    hoverinfo = "none" # Disable hover for this line
  )

fig_stationary_combustion
```

When comparing subpart C analysis of fuel combustion to the EPA provided 'stationary combustion' category of the GHG RP, we see general agreement, with our subpart analysis appear to overpredict emissions from HERC and the large in-bounds oil refinery of the region, relative to the EPA data. As the refinery emits via hydrogen production and natural gas flaring, it is possible those emissions are otherwise categorized in GHG RP.


# Natural Gas

Given overall compliance between our subpart C analysis and EPA reporting, natural gas combustion can be pulled out from a subpart C analysis and compared to our estimates of utility-supplied natural gas deliveries to the industrial sector (via NREL).

```{r fig-natural-gas-comparison}
#| fig-cap: "Comparison of natural gas combustion data"
#| out-width: "95%"

natural_gas_c_2021 <- subpart_c_emissions %>%
  filter(
    specific_fuel_type == "Natural Gas",
    reporting_year == 2021
  ) %>%
  group_by(
    county_name,
    reporting_year
  ) %>%
  summarize(value_emissions = sum(values_emissions)) %>%
  mutate(data_source = "GHGRP - Natural Gas Combustion")

mpca_natural_gas <- mpca_emissions %>%
  filter(
    fuel_type == "Natural Gas",
    inventory_year == 2021
  ) %>%
  group_by(county_name, inventory_year) %>%
  summarize(value_emissions = sum(value_emissions)) %>%
  mutate(data_source = "MPCA - Natural Gas Combustion")

natural_gas_comp <- bind_rows(
  nrel_emissions %>%
    filter(year == 2021) %>%
    mutate(data_source = "NREL") %>%
    select(
      inventory_year = year,
      county_name = geog_name,
      value_emissions = value_emissions,
      data_source
    ),
  natural_gas_c_2021 %>%
    rename(inventory_year = reporting_year),
  mpca_natural_gas
)


fig_industrial_ng_emissions <- plot_ly(
  data = natural_gas_comp,
  source = "fig-natural-gas-comparison",
  x = ~county_name,
  y = ~value_emissions,
  color = ~data_source,
  type = "bar",
  # colors = c(
  #   "EIA" = cprg_colors$cprg_da_yellow,
  #   "Metropolitan Council" = colors$councilBlue
  # ),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    data_source, "<br>",
    round(value_emissions / 1000, digits = 2), " thousand metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Industrial Natural Gas Emissions Inventory Comaparison",
    y_title = "Metric tons CO<sub>2</sub>e",
    x_title = "County",
    legend_title = "Data source"
  ) %>%
  layout(
    barmode = "group",
    hovermode = "closest",
    legend = list(
      traceorder = "normal"
    )
  )

fig_industrial_ng_emissions
```


```{r fig-natural-gas-comparison}
#| fig-cap: "Comparison of natural gas combustion data"
#| out-width: "95%"

natural_gas_c_2020 <- subpart_c_emissions %>%
  filter(
    specific_fuel_type == "Natural Gas",
    reporting_year == 2020
  ) %>%
  group_by(
    county_name,
    reporting_year
  ) %>%
  summarize(values_emissions = sum(values_emissions)) %>%
  mutate(data_source = "GHGRP - Fuel combustion")

nei_2020_no_doublecount <- left_join(
  nei_emissions %>%
    filter(inventory_year == 2020) %>%
    group_by(county_name) %>%
    summarize(values_emissions = sum(values_emissions)),
  flight_emissions %>%
    filter(
      inventory_year == 2020,
      doublecount == "Yes"
    ) %>%
    group_by(county_name) %>%
    summarize(values_emissions = sum(value_emissions)),
  by = "county_name",
  suffix = c("_NEI", "_FLIGHT")
) %>%
  mutate(values_emissions_FLIGHT = if_else(is.na(values_emissions_FLIGHT), 0, values_emissions_FLIGHT)) %>%
  mutate(
    values_emissions = as.numeric(values_emissions_NEI) - values_emissions_FLIGHT,
    data_source = "NEI - all",
    inventory_year = 2020
  ) %>%
  select(county_name, values_emissions, data_source, inventory_year)


natural_gas_comp2 <- bind_rows(
  nrel_emissions %>%
    filter(year == 2021) %>%
    mutate(data_source = "NREL") %>%
    select(
      inventory_year = year,
      county_name = geog_name,
      values_emissions = value_emissions,
      data_source
    ),
  nei_emissions %>%
    filter(
      inventory_year == 2020,
      sector_three == "Natural Gas"
    ) %>%
    ungroup() %>%
    mutate(
      data_source = "NEI - NG combustion",
      values_emissions = as.numeric(values_emissions)
    ) %>%
    select(
      inventory_year,
      county_name,
      values_emissions,
      data_source
    ),
  natural_gas_c_2020 %>%
    rename(inventory_year = reporting_year)
)

fig_industrial_ng_emissions2 <- plot_ly(
  data = natural_gas_comp2,
  source = "fig-natural-gas-comparison",
  x = ~county_name,
  y = ~values_emissions,
  color = ~data_source,
  type = "bar",
  # colors = c(
  #   "EIA" = cprg_colors$cprg_da_yellow,
  #   "Metropolitan Council" = colors$councilBlue
  # ),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    data_source, "<br>",
    round(values_emissions / 1000, digits = 2), " thousand metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Industrial Natural Gas Emissions Inventory Comaparison",
    y_title = "Metric tons CO<sub>2</sub>e",
    x_title = "County",
    legend_title = "Data source"
  ) %>%
  layout(
    barmode = "group",
    hovermode = "closest",
    legend = list(
      traceorder = "normal"
    )
  )

fig_industrial_ng_emissions2
```

### Scaling to CTUs


