# Methods and data sources
```{r  include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  fig.pos = "H",
  out.width = "100%",
  dpi = 300
)


knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
```

```{r include=FALSE}
source(file.path(here::here(), "R/_load_pkgs.R"))
source(file.path(here::here(), "R/_quarto_helpers.R"))
source(file.path(here::here(), "R/_plotting_helpers.R"))

hookaddcap()

# load in necessary data frames for comparison
county_emissions <- readRDS(file.path(here::here(), "_meta/data/cprg_county_emissions.RDS"))
flight_emissions <- readRDS(file.path(here::here(), "_industrial/data/flight_industrial_point_sources_ctu.RDS"))
ghgrp_emissions <- readRDS(file.path(here::here(), "_industrial/data/ghgrp_industrial_point_sources_ctu.rds"))
nei_emissions <- readRDS(file.path(here::here(), "_industrial/data/nei_county_industrial_emissions.RDS"))
subpart_c_emissions <- readRDS(file.path(here::here(), "_industrial/data/fuel_combustion_emissions.RDS"))
ng_doublecount <- readRDS(file.path(here::here(), "_industrial/data/fuel_combustion_emissions_doublecount.RDS"))

nrel_emissions <- county_emissions %>%
  filter(sector == "Industrial" & data_source == "Utility report")
mpca_emissions <- readRDS(file.path(here::here(), "_industrial/data/mpca_fuel_emissions.RDS"))
mpca_doublecount <- readRDS(file.path(here::here(), "_industrial/data/mpca_fuel_emissions_naturalgas_doublecount.RDS"))

### remove doublecount from NEI emissions with FLIGHT data
nei_no_doublecount <- left_join(
  nei_emissions %>%
    group_by(inventory_year, county_name) %>%
    summarize(values_emissions = sum(values_emissions)),
  flight_emissions %>%
    filter(
      inventory_year %in% c(2017, 2020),
      doublecount == "Yes"
    ) %>%
    group_by(inventory_year, county_name) %>%
    summarize(values_emissions = sum(value_emissions)),
  by = c("county_name", "inventory_year"),
  suffix = c("_NEI", "_FLIGHT")
) %>%
  mutate(values_emissions_FLIGHT = if_else(is.na(values_emissions_FLIGHT), 0, values_emissions_FLIGHT)) %>%
  mutate(
    values_emissions = as.numeric(values_emissions_NEI) - values_emissions_FLIGHT,
    data_source = "NEI - all"
  ) %>%
  select(county_name, values_emissions, data_source, inventory_year)
```

##Summary
Industrial emissions are derived from MN Pollution Control Agency (MPCA) fuel combustion data and from two EPA sources: the Greenhouse Gas Reporting Program [@usepaGreenhouseGasReporting2014] and the National Emissions Inventory [@usepaoarNationalEmissionsInventory2024]. These datasets have strengths and limitations which complement one another. The MPCA data has smaller facilities and commercial fuel combustion, but dates back only to 2016. GHGRP has facility source data dating back to 2010, but only facilities with 25,000+ metric tons of annual CO2e emissions are required to report to this program. The NEI aggregate county data includes smaller facilities, but only has GHG emission estimates for 2017 and 2020 and lacks the source level specificity.

## Double counting
A key concern for industrial emissions is avoiding double counting, particularly natural gas combustion, electricity generation, and waste management. Our energy analysis uses a demand side approach to allocate electricity usage and natural gas combustion to residential, commercial, and industrial sectors. For electricity, this means avoiding industrial emissions that arise from electricty generation (note GHGRP and NEI already avoid counting electricity consumption at industrial facilities in their analyses). Natural gas consumption requires greater care, as combustion for industrial units (e.g. boilers) may be one of or some combination of natural gas, petroleum products, coal, or other fuel sources; additionally utility provisioning of natural gas may not account for all natural gas combustion at industrial sources. Our current approach assumes only the two major refineries in-bounds have natural gas access outside of the utilities; thus all other natural gas combustion reported by industrial point sources are assumed to be counted in utility reporting. We explore this below. Our waste sector accounts for municipal waste emissions, though it does not inventory industrial waste processing.

## Electricity generation
Electricity generation is indicated as industrial subpart "D", and can be omitted from GHGRP data easily. Note that power plants also have some fuel combustion that are not directly for electricity generation and it is currently unclear if that is accounted for in our egrid analysis. However, in NEI data, powerplants are grouped under NEC (Not Elsewhere Classified), which includes non-powerpoint sources, requiring care to avoid double-counting (e.g. subtracting away GHGRP power plant data)

## Natural gas
Detailed data can be found in the GHGRP, particularly for fuel combustion. That allows us to subtract away natural gas combustion emissions from industrial combustion, to avoid potential double counting of natural gas utility data. However, the two oil refineries in-bound have large natural gas consumption and are connected directly to natural gas pipelines. This, combined with the fact that their natural gas emissions appear to exceed industrial natural gas delivery to their counties, led us to keep their natural gas emissions in this analysis.

## Waste
We are omitting in-bound municipal waste facilities from our industrial analysis to avoid double counting with our waste emissions analyses (based on county waste volume in Minnesota). Our waste analysis also include waste-to-energy emissions, so waste incineration is not considered here. Industrial waste facilities, however, are analyzed in this sector.


# Data source comparisons

Due to the reasons listed above, the expectation should be that MPCA (smaller facilities, no process emissions), GHGRP (only larger facilities), and NEI (all facilities, no point source specificity means double-counting) provide substantially different values. 

```{r fig-emissions-source-comparison}
#| fig-cap: "Comparison of 2020 industrial emissions from FLIGHT, MPCA, NEI"
#| out-width: "95%"

industrial_emissions <- bind_rows(
  mpca_emissions %>%
    filter(sector == "Industrial") %>%
    group_by(county_name, inventory_year) %>%
    summarize(value_emissions = sum(value_emissions)) %>%
    mutate(source = "MPCA"),
  flight_emissions %>%
    filter(doublecount == "No") %>%
    group_by(county_name, inventory_year) %>%
    summarize(value_emissions = sum(value_emissions)) %>%
    mutate(source = "FLIGHT"),
  ghgrp_emissions %>%
    filter(doublecount == "No") %>%
    group_by(county_name, inventory_year) %>%
    summarize(value_emissions = sum(value_emissions)) %>%
    mutate(source = "GHGRP"),
  nei_no_doublecount %>% select(-data_source) %>%
    rename(value_emissions = values_emissions) %>%
    mutate(source = "NEI")
)

fig_industrial_emissions <- plot_ly(
  data = industrial_emissions %>%
    filter(inventory_year == 2020),
  source = "fig-emissions-source-comparison",
  x = ~county_name,
  y = ~value_emissions,
  color = ~source,
  type = "bar",
  # colors = c(
  #   "EIA" = cprg_colors$cprg_da_yellow,
  #   "Metropolitan Council" = colors$councilBlue
  # ),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    source, "<br>",
    round(value_emissions / 1000, digits = 2), " thousand metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Industrial Data Source Comaparison",
    y_title = "Metric tons CO<sub>2</sub>e",
    x_title = "County",
    legend_title = "Data source"
  ) %>%
  layout(
    barmode = "group",
    hovermode = "closest",
    legend = list(
      traceorder = "normal"
    )
  )

fig_industrial_emissions
```

Currently, we are seeing large deviations (high and low) between MPCA data and federal sources, particularly in Dakota (Refinery) and Hennepin counties. MPCA data only accounts for fuel combustion, not process emissions that are common from semi-conductor manufacturing in Hennepin.

Currently, GHGRP and MPCA data can be reliably used to avoid double-counting by avoiding emissions from Natural Gas. We can compare how subpart C (Industrial combustion) analyses compares to facilities with only subpart C FLIGHT aggregates. This includes natural gas doublecounts, but validates that our subpart C analysis accurately recaptures EPA aggregated FLIGHT emissions .

```{r fig-subpart-c-emissions}
#| fig-cap: "Comparison of industrial combustion emissions from FLIGHT and subpart C analysis"
#| out-width: "95%"

subpart_c_total <- bind_rows(
  subpart_c_emissions,
  ng_doublecount
)

subpart_c <- flight_emissions %>%
  filter(subparts == "C") %>%
  left_join(., subpart_c_total %>%
    filter(industry_type_subparts == "C") %>%
    group_by(facility_id, reporting_year) %>%
    summarise(value_emissions = sum(values_emissions)),
  by = c(
    "ghgrp_id" = "facility_id",
    "inventory_year" = "reporting_year"
  ),
  suffix = c("_flight", "_subpart")
  )


fig_subpart_c_comparison <- plot_ly(
  type = "scatter",
  mode = "markers",
  source = "fig-subpart-c-emissions",
  data = subpart_c,
  x = ~value_emissions_subpart,
  y = ~value_emissions_flight,
  color = ~ as.character(inventory_year), # Map colors by year
  hovertemplate = ~ paste0(
    facility_name, "<br>",
    "FLIGHT: ", scales::comma(round(value_emissions_flight, digits = 2)), " metric tons CO<sub>2</sub>e", "<br>",
    "SUBPART C: ", scales::comma(round(value_emissions_subpart, digits = 2)), " metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  ),
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
)

fig_subpart_c_comparison <- fig_subpart_c_comparison %>%
  add_trace(
    type = "scatter",
    mode = "lines",
    x = c(0, max(subpart_c$value_emissions_subpart, na.rm = TRUE)),
    y = c(0, max(subpart_c$value_emissions_subpart, na.rm = TRUE)),
    line = list(
      dash = "dash",
      color = "black",
      width = 2
    ),
    showlegend = FALSE, # Hide this trace from the legend
    inherit = FALSE, # Ensure no properties are inherited from the previous trace
    hoverinfo = "none" # Disable hover for this line
  ) %>%
  plotly_layout(
    main_title = "Comparison of industrial combustion emissions from FLIGHT and subpart C analysis",
    x_title = "Subpart C emissions",
    y_title = "FLIGHT emissions",
    legend_title = "Year"
  )


fig_subpart_c_comparison
```

Most emissions are on or sufficiently close to the one-to-one line. The exception is the Hennepin Energy Recovery Center, a waste burning facility, which also burns a large amount of biomass that is considered as carbon neutral in FLIGHT data but has biogenic CO2 emissions recorded in GHGRP.

# Natural Gas

Given overall conformity between our subpart C analysis and EPA reporting, natural gas combustion was pulled out from MPCA and subpart C analyses for non-refinery industries and compared to our estimates of utility-supplied natural gas deliveries to the industrial sector (via NREL). Generally it looks like NREL greatly over-apportions natural gas consumption by industrial sources in all counties, and may include refinery natural gas consumption in Dakota and Washington. Future analysis will looks at utility breakdowns of natural gas delivery to utilities as a more accurate apportionment.

```{r fig-natural-gas-comparison}
#| fig-cap: "Comparison of natural gas combustion data"
#| out-width: "95%"

# load ghgrp and mpca double counts
natural_gas_dc_2021 <- ng_doublecount %>%
  filter(
    reporting_year == 2021
  ) %>%
  ungroup() %>%
  select(county_name, value_emissions = values_emissions) %>%
  bind_rows(mpca_doublecount %>%
    filter(inventory_year == 2021) %>%
    ungroup() %>%
    select(county_name, value_emissions)) %>%
  group_by(
    county_name
  ) %>%
  summarize(value_emissions = sum(value_emissions)) %>%
  mutate(data_source = "GHGRP & MPCA - Natural Gas Doublecount")

refinery_ng <- subpart_c_emissions %>%
  filter(
    reporting_year == 2021,
    general_fuel_type == "Natural Gas"
  ) %>%
  group_by(county_name) %>%
  summarize(value_emissions = sum(values_emissions)) %>%
  mutate(data_source = "GHGRP - Refinery natural gas")

natural_gas_comp <- bind_rows(
  nrel_emissions %>%
    filter(emissions_year == 2021) %>%
    mutate(data_source = "NREL") %>%
    select(
      county_name,
      value_emissions,
      data_source
    ),
  natural_gas_dc_2021,
  refinery_ng
)


fig_industrial_ng_emissions <- plot_ly(
  data = natural_gas_comp,
  source = "fig-natural-gas-comparison",
  x = ~county_name,
  y = ~value_emissions,
  color = ~data_source,
  type = "bar",
  # colors = c(
  #   "EIA" = cprg_colors$cprg_da_yellow,
  #   "Metropolitan Council" = colors$councilBlue
  # ),
  hovertemplate = ~ paste0(
    county_name, "<br>",
    data_source, "<br>",
    round(value_emissions / 1000, digits = 2), " thousand metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "Industrial Natural Gas Emissions Inventory Comaparison",
    y_title = "Metric tons CO<sub>2</sub>e",
    x_title = "County",
    legend_title = "Data source"
  ) %>%
  layout(
    barmode = "group",
    hovermode = "closest",
    legend = list(
      traceorder = "normal"
    )
  )

fig_industrial_ng_emissions
```


### Scaling to CTUs

Industrial emissions are provided as point sources from federal and state databases, allowing straightforward attribution to cities and townships. One remaining issue is to ensure proper attribution for cities and townships that share a name.


```{r echo=FALSE}
caption_index <- readRDS(file.path(here::here(), "caption_index.RDS"))
caption_index <- as.character(as.numeric(caption_index) + 1) %>% stringr::str_pad(width = 2, side = "left", pad = "0")
saveCap(paste0("cap-", caption_index))
saveRDS(caption_index, file.path(here::here(), "caption_index.RDS"))
```
