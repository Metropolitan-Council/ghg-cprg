---
title: "electricity-data-sourcing.qmd"
author: "Sam Limerick"
editor: visual
---

```{r libraries}

#check that all are all added and harmonized to/with renv before merge
library(here)
library(tidyverse)
library(councilR)
library(sf)
library(stringr)
library(tigris)

#maintains the use of here() as project root, but creates a new filepath that points to the root of the ghg-cprg project to enable the use of other resources
cprg_rootDir <- here() %>% str_remove("/_energy/data-raw")
```

text

text

```{r minnesota-utilities}


# On Behalf Of: list of all utilities we identify operating in Minnesota counties

#Document type: 	'REPORT--ELECTRIC UTILITY ANNUAL REPORT' or	'REPORT--MN ELECTRIC UTILITY ANNUAL REPORT' 
# or REPORT--2021 ELECTRIC UTILITY DATA REPORT (e.g. Mountain Lake Municipal Utilites... not in tabular format)

# Where COunty Name = in scope county list (Hennepin...), snatch . COlumn B --> grab C, column F, grab G


#can/should update to use .RDS files generated by cprg_geography.R
mn_counties <- tigris::counties(state = "MN") %>%
  filter(NAME %in% c(
    "Anoka",
    "Carver",
    "Dakota",
    "Hennepin",
    "Ramsey",
    "Scott",
    "Sherburne",
    "Chisago",
    "Washington"
  )) %>%
  select(STATEFP,COUNTYFP,GEOID, NAME, NAMELSAD, geometry)

#Downloaded from https://gisdata.mn.gov/dataset/util-eusa. Minnesota provides all three utility types (IOU, Muni, Co-op) in one file
mn_elecUtils <- st_read(here("shp_util_eusa_MN", "Service_Areas.shp")) %>%
  select(comments, municipal, mmua_name, full_name, type, utility, street, city, state, zip, website, mpuc_name, mn_utility, eia_utilit, geometry)

#reproject MN counties to same projection as mn_elecUtils to perform intersection
mn_counties <- st_transform(mn_counties, st_crs(mn_elecUtils))

st_write(mn_counties, here("shp_util_eusa_MN","mn_counties_transformed.shp"), append = FALSE)

#identify utilities that operate in study area
MNutilities_in_scope <- st_intersection(mn_elecUtils, mn_counties)  # Clip utility to counties

st_write(MNutilities_in_scope, here("shp_util_eusa_MN","MNutilities_in_scope.shp"), append = FALSE)

write_rds(MNutilities_in_scope, here("mn_utility_reporting", "MN_utilities.RDS"))
```

Wisconsin utilities

```{r wisconsin-utilities}

wi_counties <- tigris::counties(state = "WI") %>%
  filter(NAME %in% c(
    "St. Croix",
    "Pierce"
  ))


#downloaded from https://psc.wi.gov/Pages/ForConsumers/Maps.aspx. CRS is NAD83(HARN) / Wisconsin Transverse Mercator. -- add to Zotero
wi_muni <- st_read(here("EL_PSCW_ServTerr (1)", 
                        "EL_PSCW_ServTerr_Muni_repaired.shp")) #input data from WI had issues with dimensionality/geometry on some features; I filtered this data to just the 2 municipal utilities -- New Richmond and River Falls -- thatfall within our study area in ArcGIS PRO to address this issue) 
wi_iou <- st_read(here("EL_PSCW_ServTerr (1)", 
                       "EL_PSCW_ServTerr_IOU.shp"))
wi_coop <- st_read(here("EL_PSCW_ServTerr (1)", 
                        "EL_PSCW_ServTerr_Coop.shp"))


#harmonize county data CRS to WI state-provided data
wi_counties <- st_transform(wi_counties, st_crs(wi_iou))


identify_WIutilities_in_scope <- function(wi_counties, utility_files) {
  utilities_in_scope <- list()

  for (utility_file in utility_files) {
    
    utility_type <- basename(utility_file)  # Get the filename
    utility_type <- sub("^EL_PSCW_ServTerr_", "", utility_type)  # Remove prefix
    utility_type <- sub("\\.shp$", "", utility_type)  # Remove file extension
    
    utility_data <- st_read(utility_file)  # Read the shapefile
    clipped_utility <- st_intersection(utility_data, wi_counties)  # Clip utility to counties

    # Store in the list with utility type
    utilities_in_scope[[utility_type]] <- clipped_utility
  }

  return(utilities_in_scope)
}

# Example usage
wi_utility_files <- c(
  here("EL_PSCW_ServTerr (1)", 
       "EL_PSCW_ServTerr_Muni_repaired.shp"),
  here("EL_PSCW_ServTerr (1)", 
       "EL_PSCW_ServTerr_IOU.shp"),
  here("EL_PSCW_ServTerr (1)", 
       "EL_PSCW_ServTerr_Coop.shp")
)

#run function to create lists
results <- identify_WIutilities_in_scope(wi_counties, wi_utility_files)

#write outputs of function to separate environmental variables for inspection, trim to essential columns
wi_muni_utilitiesInScope <- results$Muni_repaired %>%
  select(LABEL, Util_Type, PSC_ID, ADDRESS_1, ADDRESS_2, 
         CITY, STATE, ZIP, GEOID, NAME, NAMELSAD) %>%
  rename(utility_name = LABEL, utility_type = Util_Type, 
         county_name = NAME, county = NAMELSAD)

wi_iou_utilitiesInScope <- results$IOU %>%
  select(LABEL, UTIL_TYPE, PSC_ID, ADDRESS_1, ADDRESS_2,
         CITY, STATE, ZIP, GEOID, NAME, NAMELSAD) %>%
  rename(utility_name = LABEL, utility_type = UTIL_TYPE, 
         county_name = NAME, county = NAMELSAD)


wi_coop_utilitiesInScope <- results$Coop %>%
  select(LABEL, Util_Type, PSC_ID, ADDRESS_1, ADDRESS_2,
         CITY, STATE, ZIP, GEOID, NAME, NAMELSAD) %>%
  rename(utility_name = LABEL, utility_type = Util_Type, 
         county_name = NAME, county = NAMELSAD)
  

WIutilities_in_scope <- rbind(wi_muni_utilitiesInScope,
                            wi_iou_utilitiesInScope,
                            wi_coop_utilitiesInScope)

st_write(WIutilities_in_scope,here("EL_PSCW_ServTerr (1)", 
                                   "WIutilities_in_scope.shp"))

write_rds(WIutilities_in_scope, here("wi_utility_reporting", 
                                     "WI_utilities.RDS"))
  
```

Minnesota data processing

```{r}

# Load County-Level Electricity Delivery Data
mn_electricity_data <- read.csv("path/to/minnesota_electricity_data.csv")

# Load EPA Emissions Factors (e.g., eGRID)
epa_emissions_factors <- read.csv("path/to/epa_emissions_factors.csv")

# Assuming each row in mn_electricity_data represents a utility's electricity delivery in a county, process and merge data -- this will be a separate data colelction process spanning excel reports submitted to state
processed_data <- mn_electricity_data %>%
  mutate(GHG_emissions = electricity_delivered * corresponding_factor_from_epa_factors)

# Aggregate data by county
county_level_emissions <- processed_data %>%
  group_by(county) %>%
  summarise(total_GHG_emissions = sum(GHG_emissions))

```

Wisconsin data processing

```{r Wisconsin-data}


# Example data frame: utility_data
# utility_data <- data.frame(utility_id, total_electricity, total_customers, ...)

# Example data frame: county_customer_data
# county_customer_data <- data.frame(utility_id, county, county_customers, ...)

# Join utility data with county customer data
combined_data <- left_join(county_customer_data, utility_data, by = "utility_id")

# Calculate proportion of electricity delivered to each county
combined_data <- combined_data %>%
  mutate(proportion = county_customers / total_customers,
         county_electricity = total_electricity * proportion)

# Step 3: Aggregate to get total electricity per county
county_electricity_totals <- combined_data %>%
  group_by(county) %>%
  summarise(total_electricity = sum(county_electricity))

# Step 4: Apply emissions factors
county_electricity_totals <- county_electricity_totals %>%
  mutate(GHG_emissions = total_electricity * emissions_factor)  # Replace emissions_factor with actual factor
```

text

```{r county-utilities}


#connect to PUDL to query unique list of 
#select distinct raw.utility_id_eia, core.utility_name_eia from #out_ferc714__respondents_with_fips raw join core_eia__entity_utilities core on raw#.utility_id_eia = core.utility_id_eia where county_id_fips in ()
```

text

```{r}

```
