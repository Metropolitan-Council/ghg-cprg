## Natural Gas

```{r  include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  fig.pos = "H",
  out.width = "100%",
  dpi = 300
)


knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
```

```{r, include=FALSE}
source(file.path(here::here(), "R/_quarto_helpers.R"))
source(file.path(here::here(), "R/_load_pkgs.R"))
hookaddcap()
```

### Introduction

Greenhouse gas emissions from Minnesota homes and apartment buildings have increased 14% over the past 15 years, and natural gas use is the largest source of these emissions [@mpcaClimateChangeTrends2023].

### Methods

The general workflow for quantifying natural gas emissions is to identify all of the natural gas utilities that operate within our study area, collect/aggregate reporting they provide to the states of Minnesota and Wisconsin about the amount of energy delivered to all their customers (with reference to federal reporting sources where state-level reporting gaps exist), and apply EPA-provided emissions factor to the reported activity/energy deliveries to calculate emissions. Methodologies for allocating utility activity reports to counties varies across MN and WI, and between electricity and natural gas; please see.... for more details.

*Note: Our inventory takes a "demand-side" approach to emissions quantification and seeks to aggregate all confirmed/reported delivery of energy to ALL customers served by utilities. This means that energy loss/use experienced by utilities in the process of energy generation, transmission, and delivery and resale to utilities operating outside of our study area are not reflected in the numbers attributed to counties...*

$$Emissions = \Sigma (mcf \times {Emissions Factor}) $$

#### Identifying utilities in scope

To identify the natural gas utilities that operate within our 11-county study area, we first referred to maps/geospatial datasets capturing utility service areas in Minnesota and Wisconsin. Where possible, state-maintained data sources were used, with federal sources referenced where state sources couldn't be accessed. To identify Wisconsin gas utilities, we downloaded the Natural Gas Service Territory map maintained by the Wisconsin Public Utilities Commission [@publicservicecommissionofwisconsinPSCInteractiveService2021]. Since Minnesota does not publish a state-maintained data set of natural gas service areas [@mnPublicUtilitiesInfrastructure2021], we used the Department of Homeland Security's Natural Gas Service Territories map from its Homeland Infrastructure Foundation-Level Data (HIFLD) portal is used to identify in-scope Minnesota gas utilities [@departmentofhomelandsecurityNaturalGasService2017].

For each state, we generated two .RDS files, entitled *stateAbbreviation*\_natGas_inScope_utilityCountyPairs.RDS (listing out the unique county-utility records for which activity data is required to complete our inventory) and distinct_natGas_util\_*stateAbbreviation*.RDS (listing out the distinct utilities for whom information retrieval is necessary, to simplify data collection).

*Insert table of unique utility-county pairs with state added, create a meta?*

#### Collecting activity data from utilities

Using distinct_natGas_util\_*stateAbbreviation*.RDS as a source for which utilities operate within our study area within each state,

##### Minnesota

All natural gas utilities authorized to do business in Minnesota are required to file an annual data report pursuant to MN Rules Chapter 7610. The Minnesota Public Utilities Commission makes these reports searchable through an [eFiling Site](https://www.edockets.state.mn.us/EFiling/edockets/searchDocuments.do?method=eDocketsResult&docketYear=22&docketNumber=19) [@minnesotadepartmentofcommerceAnnualReportingForms2022]. For each utility identified in distinct_natGas_util_MN.RDS, we downloaded the relevant 2021 annual report from this site.

We wrote code to extract the county-level data reported in report section "ANNUAL GAS DELIVERED TO ULTIMATE CONSUMERS BY COUNTY IN 2021" from all reports compiled into a folder directory and create a table with three columns county, utility, and mcf_delivered (thousand cubic feet of natural gas delivered). By compiling this data for all utilities found to operate within our study area, aggregating utility activity data (and thus, quantifying estimated emissions) to the county level becomes possible.

##### Wisconsin

sss

#### Emissions factors

To transform natural gas energy deliveries (recorded in mcf -- ) into emissions in metric tons CO~2~e, we referenced 2021 EPA GHG Emissions Factor Hub figures [@usepaEmissionsFactorsGreenhouse2021]:

Table of emissions factors converted into CO~2~e??

EPA originally reported these factors as kg (for CO~2~) and g (for CH~4~ and N~2~O) per standard cubic foot (scf), and we transformed these into units of lbs. per thousand cubic feet (commonly written as *mcf*) for our analysis, to 1) align with providing results in metric tons CO~2~e, and 2) to match the convention of Minnesota utilities, who reported their energy delivered in mcf. Wisconsin utilities reported their energy delivered in therms.

### Results

```{r fig-ng-county-emissions}
#| fig-cap: "2021 natural gas emissions"
#| out-width: "95%"
mn_emissions <- read_rds(file.path(here::here(), "_energy/data/minnesota_county_GasEmissions.RDS"))
wi_emissions <- read_rds(file.path(here::here(), "_energy/data/wisconsin_county_GasEmissions.RDS")) %>%
  rename(county = county_name)

natGasEmissions_all <- rbind(mn_emissions, wi_emissions) %>%
  mutate(geo = paste(county, state, sep = ", ")) %>%
  group_by(geo, county, state, year) %>%
  summarise(
    emissions_metric_tons_co2e = sum(emissions_metric_tons_co2e),
    .groups = "rowwise"
  )

fig_ng_county_emissions <- plot_ly(
  type = "bar",
  source = "fig-ng-county-emissions",
  data = natGasEmissions_all,
  y = ~ reorder(geo, emissions_metric_tons_co2e),
  x = ~emissions_metric_tons_co2e,
  # color = ~vehicle_weight_label,
  hovertemplate = ~ paste0(
    county, " County, ", state, "<br>",
    "Emissions: %{x:,.2f} metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  )
) %>%
  plotly_layout(
    main_title = "2021 county-level annual CO2e natural gas emissions",
    x_title = "Greenhouse gases emitted (metric tons)",
    subtitle = "",
    yaxis = list(
      ticklen = 5, # Adjust tick length if needed
      tickwidth = 2, # Adjust tick width if needed
      tickcolor = "#000", # Adjust tick color if needed
      tickfont = list(size = 14) # Adjust font size of ticks (labels) if needed
    ),
    margin = list(l = 120)
  ) %>%
  layout(
    barmode = "stack",
    legend = list(
      traceorder = "reversed"
    )
  )

fig_ng_county_emissions
```

#### Correlation with related data

We would expect counties with higher population to have higher emissions.

```{r fig-ng-emissions-population}
#| fig-cap: "County population and natural gas emissions"
#| out-width: "95%"
cprg_population <- readRDS(file.path(here::here(), "_meta/data/cprg_population.RDS"))
emissions_population <- left_join(natGasEmissions_all, cprg_population,
  by = c("county" = "NAME")
)
fig_ng_emissions_population <- plot_ly(
  data = emissions_population,
  source = "fig-ng-emissions-population",
  x = ~population,
  y = ~emissions_metric_tons_co2e,
  type = "scatter",
  mode = "markers",
  hovertemplate = ~ paste0(
    county, " County", "<br>",
    "Population: ", scales::comma(population), "<br>",
    "Emissions: %{y:,.2f} metric tons CO<sub>2</sub>e", "<br>",
    "<extra></extra>"
  ),
  opacity = 0.7,
  marker = list(
    size = 18,
    line = list(
      color = "lightgray",
      width = 2
    )
  )
) %>%
  plotly_layout(
    main_title = "County population and natural gas emissions",
    subtitle = "2021 ACS 5-year population estimates",
    x_title = "Total population",
    y_title = "Emissions"
  )
fig_ng_emissions_population
```

#### Comparison with other inventories

-   2018 Met Council inventory

```{r echo=FALSE}
caption_index <- readRDS(file.path(here::here(), "caption_index.RDS"))
caption_index <- as.character(as.numeric(caption_index) + 1) %>% stringr::str_pad(width = 2, side = "left", pad = "0")
saveCap(paste0("cap-", caption_index))
saveRDS(caption_index, file.path(here::here(), "caption_index.RDS"))
```

{{< pagebreak >}}
